from pathlib import Path
import numpy as np
import SimpleITK as sitk
import os
import napari
import json
import nrrd
import tkinter as tk
from tkinter import filedialog
from segmentation.segmentation import *
from skimage.morphology import binary_dilation
from skimage.morphology import binary_erosion
from skimage.segmentation import flood
import cv2 as cv
import matplotlib.pyplot as plt

from skimage.segmentation import random_walker
from uncertainty.uncertainty import calculate_uncertainty_fields
from slice_select.discreet_optimization import discreet_get_optimal_slice

global predictions

global show
show = False

baseline_results = [[[0.22311385910675524, 5, 11806, 1696, 81368], [0.44685215378951243, 10, 10507, 4248, 81859], [0.19468479604449937, 4, 13026, 1575, 100415], [0.3064318359157285, 473, 11971, 2749, 90367], [0.3072102932575821, 152, 16432, 3677, 106759], [0.42644269845570304, 739, 9846, 3935, 74140], [0.3958781451653244, 627, 11450, 3957, 91606], [0.36242237474903116, 486, 13169, 3881, 92912], [0.3010395405135995, 163, 14562, 3171, 90108], [0.2761786363201683, 209, 14929, 2888, 96994]], [[0.5705128205128205, 0, 134, 89, 4187], [0.6701388888888888, 0, 190, 193, 5551], [0.5264516129032258, 0, 367, 204, 7341], [0.04416403785488959, 0, 303, 7, 5774], [0.08056042031523643, 1, 524, 23, 9772], [0.271356783919598, 1, 289, 54, 6988], [0.03194888178913738, 0, 303, 5, 6580], [0.06060606060606061, 0, 310, 10, 6240], [0.3218045112781955, 0, 451, 107, 6774], [0.0243161094224924, 0, 321, 4, 8900]], [[0.19910652535561413, 656, 42191, 5326, 786451], [0.19688203150112504, 516, 19472, 2450, 772187], [0.0753957686048232, 224, 31023, 1274, 854879], [0.1631840340557984, 247, 36316, 3565, 996516], [0.09517275177652536, 225, 36701, 1942, 953838], [0.15964939740178433, 131, 26714, 2550, 752605], [0.10805270863836018, 92, 36460, 2214, 660594], [0.15034341663013298, 180, 28891, 2572, 838597], [0.1455508151759866, 376, 44486, 3821, 899033], [0.2969495811601075, 847, 21394, 4697, 848222]], [[0.304635761589404, 3, 312, 69, 15866], [0.02857142857142857, 0, 340, 5, 17097], [0.19047619047619047, 11, 312, 38, 23089], [0.25760286225402507, 10, 405, 72, 20303], [0.04560260586319218, 0, 293, 7, 14592], [0.08436724565756824, 0, 369, 17, 20284], [0.18075801749271136, 1, 280, 31, 17832], [0.05755395683453238, 0, 262, 8, 20754], [0.15019762845849802, 13, 417, 38, 28652], [0.043859649122807015, 2, 434, 10, 30562]], [[0.15425531914893617, 1, 317, 29, 16068], [0.10722610722610723, 2, 381, 23, 22918], [0.1126005361930295, 1, 330, 21, 21222], [0.23746701846965698, 9, 280, 45, 18986], [0.2074468085106383, 0, 298, 39, 19163], [0.04778156996587031, 0, 279, 7, 21164], [0.09266409266409266, 0, 235, 12, 18113], [0.0625, 0, 300, 10, 26402], [0.017738359201773836, 0, 443, 4, 26391], [0.061068702290076333, 0, 369, 12, 17559]], [[0.5313216399210962, 32, 8759, 4983, 104938], [0.690059758052762, 1053, 7453, 9469, 106825], [0.5937056239886397, 536, 11767, 8989, 125540], [0.446033367381682, 239, 9523, 3930, 124862], [0.5795958600295712, 247, 12548, 8820, 153400], [0.5541815272824239, 208, 13167, 8313, 164687], [0.6500181950509462, 244, 7450, 7145, 118161], [0.5926503253965161, 287, 10166, 7604, 133199], [0.6425381090971962, 822, 11583, 11149, 163070], [0.5066647189862323, 470, 13039, 6937, 145907]], [[0.5581968222687523, 262, 10499, 6798, 115041], [0.6456519970715041, 337, 8375, 7937, 104101], [0.5604300927042768, 562, 12193, 8131, 123954], [0.5098906934548834, 199, 10876, 5761, 163764], [0.5581746552856205, 333, 13125, 8501, 131221], [0.633474507775371, 187, 11150, 9797, 132874], [0.550381033022862, 148, 9410, 5850, 166410], [0.5697627338246012, 350, 10276, 7036, 136076], [0.5885063045586809, 498, 13078, 9708, 193868], [0.6019926586261143, 1265, 10120, 8610, 125535]], [[0.7223326706428098, 158, 680, 1090, 20303], [0.364058509403297, 173, 2566, 784, 43805], [0.6580547112462006, 160, 2090, 2165, 43969], [0.3000898472596586, 15, 3880, 835, 52563], [0.32987234042553193, 46, 3891, 969, 53374], [0.44360547428032093, 188, 4528, 1880, 49504], [0.49156118143459915, 71, 2339, 1165, 34841], [0.49411071849234395, 67, 3369, 1678, 48884], [0.48737104233368905, 124, 2758, 1370, 43172], [0.5074265595775113, 123, 4354, 2306, 55167]], [[0.7622828784119107, 49, 909, 1536, 23356], [0.3827203331020125, 3, 3555, 1103, 50459], [0.6420422133485454, 146, 2364, 2251, 48135], [0.30642907058001395, 163, 3807, 877, 60025], [0.24532362191690119, 9, 4550, 741, 51400], [0.44329730601709955, 20, 3431, 1374, 47539], [0.6274787535410765, 184, 1920, 1772, 35079], [0.46982358402971214, 34, 2821, 1265, 48680], [0.36216025414754677, 22, 3592, 1026, 42689], [0.43858988834525153, 319, 4156, 1748, 53243]]]
avr_pred_results = [[[0.36352772466539196, 192, 10460, 3042, 81181], [0.7396601880349087, 192, 5983, 8772, 81677], [0.36118479221927496, 227, 11333, 3268, 100192], [0.5751236211487257, 264, 8672, 6048, 90576], [0.41361256544502617, 495, 14737, 5372, 106416], [0.6743039829492473, 1147, 6188, 7593, 73732], [0.7156643802839369, 696, 6434, 8973, 91537], [0.604903536977492, 305, 9525, 7525, 93093], [0.4969012184324803, 93, 11840, 5893, 90178], [0.47831360575515497, 374, 12099, 5718, 96829]], [[0.5974842767295597, 0, 128, 95, 4187], [0.752442996742671, 0, 152, 231, 5551], [0.7984718242597899, 58, 153, 418, 7283], [0.08615384615384615, 1, 296, 14, 5773], [0.10069444444444445, 0, 518, 29, 9773], [0.2787286063569682, 9, 286, 57, 6980], [0.03821656050955414, 0, 302, 6, 6580], [0.2198952879581152, 20, 278, 42, 6220], [0.49866666666666665, 5, 371, 187, 6769], [0.07624633431085044, 3, 312, 13, 8897]], [[0.39778417314058523, 640, 35561, 11956, 786467], [0.3722915298752462, 389, 16819, 5103, 772314], [0.21994142923611681, 222, 28279, 4018, 854881], [0.3871032462581758, 314, 30234, 9647, 996449], [0.3238840835911358, 1179, 30948, 7695, 952884], [0.3571448448587728, 254, 22847, 6417, 752482], [0.352147809910367, 301, 30345, 8329, 660385], [0.41906135030327135, 336, 23034, 8429, 838441], [0.24703336339044185, 294, 41458, 6849, 899115], [0.4480658920429475, 288, 18475, 7616, 848781]], [[0.6892109500805152, 26, 167, 214, 15843], [0.4388185654008439, 25, 241, 104, 17072], [0.4806201550387597, 42, 226, 124, 23058], [0.5444444444444444, 47, 281, 196, 20266], [0.39429928741092635, 38, 217, 83, 14554], [0.09359605911330049, 1, 367, 19, 20283], [0.4597156398104265, 14, 214, 97, 17819], [0.43147208121827413, 39, 185, 85, 20715], [0.3936, 47, 332, 123, 28618], [0.3187919463087248, 57, 349, 95, 30507]], [[0.647787610619469, 36, 163, 183, 16033], [0.48849557522123893, 23, 266, 138, 22897], [0.350210970464135, 40, 268, 83, 21183], [0.49168207024029575, 83, 192, 133, 18912], [0.4959349593495935, 33, 215, 122, 19130], [0.06756756756756757, 0, 276, 10, 21164], [0.4528301886792453, 40, 163, 84, 18073], [0.5267665952890792, 34, 187, 123, 26368], [0.5, 87, 269, 178, 26304], [0.40551181102362205, 24, 278, 103, 17535]], [[0.8203420122669483, 779, 3644, 10098, 104191], [0.8535359879412134, 1332, 3332, 13590, 106546], [0.7851193156235929, 830, 6806, 13950, 125246], [0.6491812922835573, 324, 6832, 6621, 124777], [0.8135774995307934, 757, 6196, 15172, 152890], [0.7759359895136405, 932, 7273, 14207, 163963], [0.8335961235242088, 570, 3757, 10838, 117835], [0.7626354087781106, 1020, 6189, 11581, 132466], [0.8103727714748784, 1490, 6232, 16500, 162402], [0.7431951955540949, 1056, 7539, 12437, 145321]], [[0.7903824541089126, 462, 5693, 11604, 114841], [0.8510780321740872, 900, 3562, 12750, 103538], [0.7973391178597252, 467, 6540, 13784, 124049], [0.5443163666191771, 222, 10333, 6304, 163741], [0.7595596268593999, 514, 8069, 13557, 131040], [0.8441706714812947, 819, 5050, 15897, 132242], [0.7709144871081433, 1305, 4870, 10390, 165253], [0.7504815036195789, 1502, 6012, 11300, 134924], [0.7452467449815704, 873, 8734, 14052, 193493], [0.6094610257896262, 465, 10317, 8413, 126335]], [[0.7765765765765765, 267, 477, 1293, 20194], [0.46634311036083564, 284, 2245, 1105, 43694], [0.8160286775060812, 369, 1068, 3187, 43760], [0.593172311428957, 498, 2517, 2198, 52080], [0.4480171489817792, 208, 3397, 1463, 53212], [0.7511269722013524, 241, 2409, 3999, 49451], [0.806758530183727, 133, 1045, 2459, 34779], [0.723714682723483, 464, 1922, 3125, 48487], [0.8276121272863944, 551, 825, 3303, 42745], [0.653872786625779, 144, 3355, 3305, 55146]], [[0.8177559669863931, 205, 612, 1833, 23200], [0.5248713550600344, 72, 2975, 1683, 50390], [0.7509303220839215, 252, 1689, 2926, 48029], [0.5554808338937458, 686, 2619, 2065, 59502], [0.2739236393176279, 21, 4448, 843, 51388], [0.6726775956284153, 53, 2343, 2462, 47506], [0.7730874979783277, 101, 1302, 2390, 35162], [0.5942320590207915, 106, 2314, 1772, 48608], [0.8253432907733076, 258, 1192, 3426, 42453], [0.6914708442123586, 110, 2726, 3178, 53452]]]
una_pred_results = [[[0.24763386490340983, 14, 11592, 1910, 81359], [0.4604068857589984, 2, 10342, 4413, 81867], [0.2031980319803198, 7, 12949, 1652, 100412], [0.37214423341590974, 65, 11340, 3380, 90775], [0.31343345675417067, 161, 16342, 3767, 106750], [0.5256616085763116, 453, 8706, 5075, 74426], [0.48076642513251955, 213, 10464, 4943, 92020], [0.3649906890130354, 71, 13228, 3822, 93327], [0.3110519054189067, 17, 14464, 3269, 90254], [0.2655863373926544, 57, 15080, 2737, 97146]], [[0.6546546546546547, 1, 114, 109, 4186], [0.7744, 0, 141, 242, 5551], [0.5909090909090909, 18, 324, 247, 7323], [0.07453416149068323, 0, 298, 12, 5774], [0.10398613518197573, 0, 517, 30, 9773], [0.32116788321167883, 2, 277, 66, 6987], [0.03821656050955414, 0, 302, 6, 6580], [0.14367816091954022, 3, 295, 25, 6237], [0.4530386740331492, 2, 394, 164, 6772], [0.05970149253731343, 0, 315, 10, 8900]], [[0.15399833200799085, 72, 43547, 3970, 787035], [0.08227682084462709, 11, 20981, 941, 772692], [0.04678716073263616, 15, 31523, 774, 855088], [0.12056821126528304, 9, 37322, 2559, 996754], [0.06974015924918253, 23, 37246, 1397, 954040], [0.09626329311522326, 5, 27784, 1480, 752731], [0.06009078825270233, 1, 37476, 1198, 660685], [0.09516026514119677, 4, 29891, 1572, 838773], [0.08544197198169101, 4, 46151, 2156, 899405], [0.10250072695551032, 11, 24681, 1410, 849058]], [[0.4574898785425101, 0, 268, 113, 15869], [0.1043956043956044, 0, 326, 19, 17097], [0.3105022831050228, 20, 282, 68, 23080], [0.38782051282051283, 26, 356, 121, 20287], [0.1094224924012158, 11, 282, 18, 14581], [0.0891089108910891, 0, 368, 18, 20284], [0.25, 4, 266, 45, 17829], [0.09154929577464789, 1, 257, 13, 20753], [0.2504604051565378, 20, 387, 68, 28645], [0.09421841541755889, 1, 422, 22, 30563]], [[0.34988179669030733, 3, 272, 74, 16066], [0.1336405529953917, 1, 375, 29, 22919], [0.17857142857142858, 6, 316, 35, 21217], [0.35207823960880197, 12, 253, 72, 18983], [0.36104513064133015, 8, 261, 76, 19155], [0.04778156996587031, 0, 279, 7, 21164], [0.2222222222222222, 9, 215, 32, 18104], [0.08641975308641975, 0, 296, 14, 26402], [0.030837004405286344, 0, 440, 7, 26391], [0.1044776119402985, 0, 360, 21, 17559]], [[0.6355745181697808, 169, 7262, 6480, 104801], [0.7290945258970014, 328, 7026, 9896, 107550], [0.6138006138006138, 247, 11456, 9300, 125829], [0.4218075801749271, 80, 9836, 3617, 125021], [0.5875472318054871, 126, 12427, 8941, 153521], [0.6127946127946128, 150, 11925, 9555, 164745], [0.6632805768445875, 143, 7282, 7313, 118262], [0.648141923436041, 328, 9093, 8677, 133158], [0.6677227950918831, 395, 11141, 11591, 163497], [0.5279276651596908, 212, 12736, 7240, 146165]], [[0.6378050676200839, 229, 9091, 8206, 115074], [0.6975091777523389, 186, 7477, 8835, 104252], [0.6048219811609481, 190, 11431, 8893, 124326], [0.3663186786256923, 29, 12900, 3737, 163934], [0.5967486506577033, 83, 12394, 9232, 131471], [0.6979907074063817, 210, 9605, 11342, 132851], [0.6309717757914667, 286, 8095, 7165, 166272], [0.6038423450188156, 311, 9690, 7622, 136115], [0.5700890764181903, 89, 13666, 9120, 194277], [0.4716143099410482, 196, 12890, 5840, 126604]], [[0.7317073170731707, 128, 675, 1095, 20333], [0.38350419384902146, 119, 2527, 823, 43859], [0.6911568656495334, 163, 1922, 2333, 43966], [0.3798068778587159, 67, 3594, 1121, 52511], [0.32460020415107177, 64, 3906, 954, 53356], [0.3209747150530591, 0, 5183, 1225, 49692], [0.5295349811478843, 6, 2240, 1264, 34906], [0.5176031038942377, 111, 3246, 1801, 48840], [0.5450489102454092, 111, 2540, 1588, 43185], [0.47723382403286546, 12, 4569, 2091, 55278]], [[0.799720214502215, 129, 730, 1715, 23276], [0.308334846558925, 0, 3809, 849, 50462], [0.5561381863047502, 66, 2812, 1803, 48215], [0.3184492904119072, 174, 3764, 920, 60014], [0.08401231214919427, 0, 5059, 232, 51409], [0.3464512802887094, 6, 3797, 1008, 47553], [0.5649149922720247, 22, 2230, 1462, 35241], [0.41312741312741313, 24, 3016, 1070, 48690], [0.33303297891511985, 7, 3694, 924, 42704], [0.404777882163468, 39, 4396, 1508, 53523]]]
baseline_results = np.array(baseline_results)
avr_pred_results = np.array(avr_pred_results)
una_pred_results = np.array(una_pred_results)
baseline_2iterations = [[[[0.22311385910675524, 5, 11806, 1696, 81368], [0.44217922137756277, 23, 9663, 3839, 81350]], [[0.44685215378951243, 10, 10507, 4248, 81859], [0.6594633531424455, 133, 7431, 7324, 81736]], [[0.19468479604449937, 4, 13026, 1575, 100415], [0.2712907616736699, 4, 12309, 2292, 100415]], [[0.3064318359157285, 473, 11971, 2749, 90367], [0.6385526373290216, 857, 7414, 7306, 89983]], [[0.3072102932575821, 152, 16432, 3677, 106759], [0.5023909365114397, 248, 13280, 6829, 106663]], [[0.42644269845570304, 739, 9846, 3935, 74140], [0.6328557784145177, 533, 7155, 6626, 74346]], [[0.3958781451653244, 627, 11450, 3957, 91606], [0.6332108994618604, 594, 7994, 7413, 91639]], [[0.36242237474903116, 486, 13169, 3881, 92912], [0.5973953339725152, 505, 9573, 7477, 92893]], [[0.3010395405135995, 163, 14562, 3171, 90108], [0.5686982037352789, 315, 10562, 7171, 89956]], [[0.2761786363201683, 209, 14929, 2888, 96994], [0.5192097042476368, 433, 11418, 6399, 96770]]], [[[0.5705128205128205, 0, 134, 89, 4187], [0.5705128205128205, 0, 134, 89, 4187]], [[0.6701388888888888, 0, 190, 193, 5551], [0.6701388888888888, 0, 190, 193, 5551]], [[0.5264516129032258, 0, 367, 204, 7341], [0.6873563218390805, 0, 272, 299, 7341]], [[0.04416403785488959, 0, 303, 7, 5774], [0.04416403785488959, 0, 303, 7, 5774]], [[0.08056042031523643, 1, 524, 23, 9772], [0.16415410385259632, 1, 498, 49, 9772]], [[0.271356783919598, 1, 289, 54, 6988], [0.271356783919598, 1, 289, 54, 6988]], [[0.03194888178913738, 0, 303, 5, 6580], [0.03194888178913738, 0, 303, 5, 6580]], [[0.06060606060606061, 0, 310, 10, 6240], [0.06060606060606061, 0, 310, 10, 6240]], [[0.3218045112781955, 0, 451, 107, 6774], [0.5891276864728192, 0, 325, 233, 6774]], [[0.0243161094224924, 0, 321, 4, 8900], [0.0243161094224924, 0, 321, 4, 8900]]], [[[0.19910652535561413, 656, 42191, 5326, 786451], [0.4367975535553839, 2067, 33662, 13855, 785040]], [[0.19688203150112504, 516, 19472, 2450, 772187], [0.27837776602975606, 874, 18236, 3686, 771829]], [[0.0753957686048232, 224, 31023, 1274, 854879], [0.10786360473208072, 331, 30437, 1860, 854772]], [[0.1631840340557984, 247, 36316, 3565, 996516], [0.2710055901545263, 791, 33506, 6375, 995972]], [[0.09517275177652536, 225, 36701, 1942, 953838], [0.11751330430575714, 268, 36214, 2429, 953795]], [[0.15964939740178433, 131, 26714, 2550, 752605], [0.20726677180638117, 291, 25847, 3417, 752445]], [[0.10805270863836018, 92, 36460, 2214, 660594], [0.22669727481419188, 336, 33687, 4987, 660350]], [[0.15034341663013298, 180, 28891, 2572, 838597], [0.21504833963850356, 385, 27626, 3837, 838392]], [[0.1455508151759866, 376, 44486, 3821, 899033], [0.16435992648437794, 633, 43925, 4382, 898776]], [[0.2969495811601075, 847, 21394, 4697, 848222], [0.37105530036389667, 1215, 19871, 6220, 847854]]], [[[0.304635761589404, 3, 312, 69, 15866], [0.3542116630669546, 0, 299, 82, 15869]], [[0.02857142857142857, 0, 340, 5, 17097], [0.08333333333333333, 0, 330, 15, 17097]], [[0.19047619047619047, 11, 312, 38, 23089], [0.22727272727272727, 1, 305, 45, 23099]], [[0.25760286225402507, 10, 405, 72, 20303], [0.3624161073825503, 11, 369, 108, 20302]], [[0.04560260586319218, 0, 293, 7, 14592], [0.04560260586319218, 0, 293, 7, 14592]], [[0.08436724565756824, 0, 369, 17, 20284], [0.08436724565756824, 0, 369, 17, 20284]], [[0.18075801749271136, 1, 280, 31, 17832], [0.20689655172413793, 1, 275, 36, 17832]], [[0.05755395683453238, 0, 262, 8, 20754], [0.0851063829787234, 0, 258, 12, 20754]], [[0.15019762845849802, 13, 417, 38, 28652], [0.2641509433962264, 5, 385, 70, 28660]], [[0.043859649122807015, 2, 434, 10, 30562], [0.07792207792207792, 0, 426, 18, 30564]]], [[[0.15425531914893617, 1, 317, 29, 16068], [0.20725388601036268, 0, 306, 40, 16069]], [[0.10722610722610723, 2, 381, 23, 22918], [0.2275711159737418, 1, 352, 52, 22919]], [[0.1126005361930295, 1, 330, 21, 21222], [0.12299465240641712, 0, 328, 23, 21223]], [[0.23746701846965698, 9, 280, 45, 18986], [0.23369565217391305, 0, 282, 43, 18995]], [[0.2074468085106383, 0, 298, 39, 19163], [0.2074468085106383, 0, 298, 39, 19163]], [[0.04778156996587031, 0, 279, 7, 21164], [0.04778156996587031, 0, 279, 7, 21164]], [[0.09266409266409266, 0, 235, 12, 18113], [0.09266409266409266, 0, 235, 12, 18113]], [[0.0625, 0, 300, 10, 26402], [0.05642633228840126, 0, 301, 9, 26402]], [[0.017738359201773836, 0, 443, 4, 26391], [0.07327586206896551, 0, 430, 17, 26391]], [[0.061068702290076333, 0, 369, 12, 17559], [0.061068702290076333, 0, 369, 12, 17559]]], [[[0.5313216399210962, 32, 8759, 4983, 104938], [0.677093607627636, 341, 6534, 7208, 104629]], [[0.690059758052762, 1053, 7453, 9469, 106825], [0.7319452533488643, 496, 6868, 10054, 107382]], [[0.5937056239886397, 536, 11767, 8989, 125540], [0.6625693393847706, 461, 10245, 10511, 125615]], [[0.446033367381682, 239, 9523, 3930, 124862], [0.6003237883233836, 380, 7520, 5933, 124721]], [[0.5795958600295712, 247, 12548, 8820, 153400], [0.6580302984119243, 645, 10574, 10794, 153002]], [[0.5541815272824239, 208, 13167, 8313, 164687], [0.7258513161362106, 278, 9085, 12395, 164617]], [[0.6500181950509462, 244, 7450, 7145, 118161], [0.6732827062478426, 779, 6793, 7802, 117626]], [[0.5926503253965161, 287, 10166, 7604, 133199], [0.6734715960324617, 619, 8434, 9336, 132867]], [[0.6425381090971962, 822, 11583, 11149, 163070], [0.7079281358167133, 785, 9847, 12885, 163107]], [[0.5066647189862323, 470, 13039, 6937, 145907], [0.6481203987230438, 774, 10028, 9948, 145603]]], [[[0.5581968222687523, 262, 10499, 6798, 115041], [0.704084997252244, 389, 7688, 9609, 114914]], [[0.6456519970715041, 337, 8375, 7937, 104101], [0.639055688080941, 233, 8543, 7769, 104205]], [[0.5604300927042768, 562, 12193, 8131, 123954], [0.6400951028629924, 267, 10632, 9692, 124249]], [[0.5098906934548834, 199, 10876, 5761, 163764], [0.6071516646115906, 307, 9251, 7386, 163656]], [[0.5581746552856205, 333, 13125, 8501, 131221], [0.6224780294590915, 632, 11568, 10058, 130922]], [[0.633474507775371, 187, 11150, 9797, 132874], [0.710404675990815, 675, 9036, 11911, 132386]], [[0.550381033022862, 148, 9410, 5850, 166410], [0.6555330634278003, 680, 7488, 7772, 165878]], [[0.5697627338246012, 350, 10276, 7036, 136076], [0.7143372537701133, 506, 7412, 9900, 135920]], [[0.5885063045586809, 498, 13078, 9708, 193868], [0.6565145746917439, 858, 11232, 11554, 193508]], [[0.6019926586261143, 1265, 10120, 8610, 125535], [0.7253461613469414, 878, 7572, 11158, 125922]]], [[[0.7223326706428098, 158, 680, 1090, 20303], [0.8092229943145925, 115, 489, 1281, 20346]], [[0.364058509403297, 173, 2566, 784, 43805], [0.5387287962395259, 225, 2032, 1318, 43753]], [[0.6580547112462006, 160, 2090, 2165, 43969], [0.6525037936267072, 185, 2105, 2150, 43944]], [[0.3000898472596586, 15, 3880, 835, 52563], [0.5824322322618871, 70, 2749, 1966, 52508]], [[0.32987234042553193, 46, 3891, 969, 53374], [0.41793460666882487, 27, 3569, 1291, 53393]], [[0.44360547428032093, 188, 4528, 1880, 49504], [0.42364767831498323, 178, 4638, 1770, 49514]], [[0.49156118143459915, 71, 2339, 1165, 34841], [0.7626693426994481, 195, 1224, 2280, 34717]], [[0.49411071849234395, 67, 3369, 1678, 48884], [0.4949391227812821, 83, 3360, 1687, 48868]], [[0.48737104233368905, 124, 2758, 1370, 43172], [0.46616541353383456, 54, 2857, 1271, 43242]], [[0.5074265595775113, 123, 4354, 2306, 55167], [0.5164534820159615, 125, 4298, 2362, 55165]]], [[[0.7622828784119107, 49, 909, 1536, 23356], [0.7936281502615311, 92, 776, 1669, 23313]], [[0.3827203331020125, 3, 3555, 1103, 50459], [0.48334949886841255, 33, 3163, 1495, 50429]], [[0.6420422133485454, 146, 2364, 2251, 48135], [0.6210268948655256, 179, 2456, 2159, 48102]], [[0.30642907058001395, 163, 3807, 877, 60025], [0.4164567590260285, 31, 3444, 1240, 60157]], [[0.24532362191690119, 9, 4550, 741, 51400], [0.31067344345616266, 27, 4313, 978, 51382]], [[0.44329730601709955, 20, 3431, 1374, 47539], [0.5030902348578492, 39, 3177, 1628, 47520]], [[0.6274787535410765, 184, 1920, 1772, 35079], [0.6380090497737556, 221, 1859, 1833, 35042]], [[0.46982358402971214, 34, 2821, 1265, 48680], [0.6357142857142857, 116, 2128, 1958, 48598]], [[0.36216025414754677, 22, 3592, 1026, 42689], [0.44488844488844487, 52, 3282, 1336, 42659]], [[0.43858988834525153, 319, 4156, 1748, 53243], [0.7839049103663289, 337, 1881, 4023, 53225]]]]
avr_pred_2iterations = [[[[0.36352772466539196, 192, 10460, 3042, 81181], [0.5559180344581507, 663, 8049, 5453, 80710]], [[0.7396601880349087, 192, 5983, 8772, 81677], [0.7740714454696002, 791, 4939, 9816, 81078]], [[0.36118479221927496, 227, 11333, 3268, 100192], [0.7104382736701238, 817, 6107, 8494, 99602]], [[0.5751236211487257, 264, 8672, 6048, 90576], [0.7777733295968614, 545, 5006, 9714, 90295]], [[0.41361256544502617, 495, 14737, 5372, 106416], [0.7956474676693442, 1031, 6143, 13966, 105880]], [[0.6743039829492473, 1147, 6188, 7593, 73732], [0.8331755797444392, 1012, 3218, 10563, 73867]], [[0.7156643802839369, 696, 6434, 8973, 91537], [0.8179638107695661, 859, 4151, 11256, 91374]], [[0.604903536977492, 305, 9525, 7525, 93093], [0.8461765962341034, 506, 4175, 12875, 92892]], [[0.4969012184324803, 93, 11840, 5893, 90178], [0.8017516179927231, 874, 5283, 12450, 89397]], [[0.47831360575515497, 374, 12099, 5718, 96829], [0.8109967785318862, 1191, 4852, 12965, 96012]]], [[[0.5974842767295597, 0, 128, 95, 4187], [0.5974842767295597, 0, 128, 95, 4187]], [[0.752442996742671, 0, 152, 231, 5551], [0.752442996742671, 0, 152, 231, 5551]], [[0.7984718242597899, 58, 153, 418, 7283], [0.82, 19, 161, 410, 7322]], [[0.08615384615384615, 1, 296, 14, 5773], [0.08615384615384615, 1, 296, 14, 5773]], [[0.10069444444444445, 0, 518, 29, 9773], [0.10069444444444445, 0, 518, 29, 9773]], [[0.2787286063569682, 9, 286, 57, 6980], [0.2787286063569682, 9, 286, 57, 6980]], [[0.03821656050955414, 0, 302, 6, 6580], [0.03821656050955414, 0, 302, 6, 6580]], [[0.2198952879581152, 20, 278, 42, 6220], [0.2198952879581152, 20, 278, 42, 6220]], [[0.49866666666666665, 5, 371, 187, 6769], [0.49866666666666665, 5, 371, 187, 6769]], [[0.07624633431085044, 3, 312, 13, 8897], [0.07624633431085044, 3, 312, 13, 8897]]], [[[0.39778417314058523, 640, 35561, 11956, 786467], [0.6292363433667781, 1666, 24940, 22577, 785441]], [[0.3722915298752462, 389, 16819, 5103, 772314], [0.3722915298752462, 389, 16819, 5103, 772314]], [[0.21994142923611681, 222, 28279, 4018, 854881], [0.23854304994715303, 201, 27896, 4401, 854902]], [[0.3871032462581758, 314, 30234, 9647, 996449], [0.38717573179784526, 313, 30232, 9649, 996450]], [[0.3238840835911358, 1179, 30948, 7695, 952884], [0.2839178064432489, 1068, 32073, 6570, 952995]], [[0.3571448448587728, 254, 22847, 6417, 752482], [0.3470045695382804, 218, 23075, 6189, 752518]], [[0.352147809910367, 301, 30345, 8329, 660385], [0.3667064714139065, 307, 29922, 8752, 660379]], [[0.41906135030327135, 336, 23034, 8429, 838441], [0.7625654602021296, 555, 11732, 19731, 838222]], [[0.24703336339044185, 294, 41458, 6849, 899115], [0.7220510678293561, 641, 20651, 27656, 898768]], [[0.4480658920429475, 288, 18475, 7616, 848781], [0.48023704044646454, 324, 17744, 8347, 848745]]], [[[0.6892109500805152, 26, 167, 214, 15843], [0.6892109500805152, 26, 167, 214, 15843]], [[0.4388185654008439, 25, 241, 104, 17072], [0.4388185654008439, 25, 241, 104, 17072]], [[0.4806201550387597, 42, 226, 124, 23058], [0.4806201550387597, 42, 226, 124, 23058]], [[0.5444444444444444, 47, 281, 196, 20266], [0.5702479338842975, 42, 270, 207, 20271]], [[0.39429928741092635, 38, 217, 83, 14554], [0.39429928741092635, 38, 217, 83, 14554]], [[0.09359605911330049, 1, 367, 19, 20283], [0.09359605911330049, 1, 367, 19, 20283]], [[0.4597156398104265, 14, 214, 97, 17819], [0.4597156398104265, 14, 214, 97, 17819]], [[0.43147208121827413, 39, 185, 85, 20715], [0.43147208121827413, 39, 185, 85, 20715]], [[0.3936, 47, 332, 123, 28618], [0.5622377622377622, 59, 254, 201, 28606]], [[0.3187919463087248, 57, 349, 95, 30507], [0.3187919463087248, 57, 349, 95, 30507]]], [[[0.647787610619469, 36, 163, 183, 16033], [0.647787610619469, 36, 163, 183, 16033]], [[0.48849557522123893, 23, 266, 138, 22897], [0.4037735849056604, 19, 297, 107, 22901]], [[0.350210970464135, 40, 268, 83, 21183], [0.350210970464135, 40, 268, 83, 21183]], [[0.49168207024029575, 83, 192, 133, 18912], [0.5267665952890792, 19, 202, 123, 18976]], [[0.4959349593495935, 33, 215, 122, 19130], [0.4959349593495935, 33, 215, 122, 19130]], [[0.06756756756756757, 0, 276, 10, 21164], [0.06756756756756757, 0, 276, 10, 21164]], [[0.4528301886792453, 40, 163, 84, 18073], [0.4528301886792453, 40, 163, 84, 18073]], [[0.5267665952890792, 34, 187, 123, 26368], [0.504424778761062, 28, 196, 114, 26374]], [[0.5, 87, 269, 178, 26304], [0.5405405405405406, 93, 247, 200, 26298]], [[0.40551181102362205, 24, 278, 103, 17535], [0.40551181102362205, 24, 278, 103, 17535]]], [[[0.8203420122669483, 779, 3644, 10098, 104191], [0.7588545915081785, 713, 4904, 8838, 104257]], [[0.8535359879412134, 1332, 3332, 13590, 106546], [0.8240608345248928, 1171, 4243, 12679, 106707]], [[0.7851193156235929, 830, 6806, 13950, 125246], [0.8147924941788796, 877, 5884, 14872, 125199]], [[0.6491812922835573, 324, 6832, 6621, 124777], [0.7749576988155669, 665, 4522, 8931, 124436]], [[0.8135774995307934, 757, 6196, 15172, 152890], [0.7020470950183411, 570, 9502, 11866, 153077]], [[0.7759359895136405, 932, 7273, 14207, 163963], [0.8349966389161797, 1050, 5332, 16148, 163845]], [[0.8335961235242088, 570, 3757, 10838, 117835], [0.8382241718348208, 766, 3512, 11083, 117639]], [[0.7626354087781106, 1020, 6189, 11581, 132466], [0.730668658946582, 919, 7012, 10758, 132567]], [[0.8103727714748784, 1490, 6232, 16500, 162402], [0.7824061178496367, 1310, 7283, 15449, 162582]], [[0.7431951955540949, 1056, 7539, 12437, 145321], [0.7804849409968884, 796, 6682, 13294, 145581]]], [[[0.7903824541089126, 462, 5693, 11604, 114841], [0.7671251766814907, 584, 6171, 11126, 114719]], [[0.8510780321740872, 900, 3562, 12750, 103538], [0.8147420147420148, 572, 4706, 11606, 103866]], [[0.7973391178597252, 467, 6540, 13784, 124049], [0.8035673187571922, 470, 6358, 13966, 124046]], [[0.5443163666191771, 222, 10333, 6304, 163741], [0.7080281058454179, 647, 7165, 9472, 163316]], [[0.7595596268593999, 514, 8069, 13557, 131040], [0.7884032649941306, 565, 7186, 14440, 130989]], [[0.8441706714812947, 819, 5050, 15897, 132242], [0.8119283640944192, 746, 6122, 14825, 132315]], [[0.7709144871081433, 1305, 4870, 10390, 165253], [0.7919576563993237, 1173, 4487, 10773, 165385]], [[0.7504815036195789, 1502, 6012, 11300, 134924], [0.8181063653195428, 1200, 4498, 12814, 135226]], [[0.7452467449815704, 873, 8734, 14052, 193493], [0.7450794403604458, 1028, 8647, 14139, 193338]], [[0.6094610257896262, 465, 10317, 8413, 126335], [0.784879261145715, 1071, 5940, 12790, 125729]]], [[[0.7765765765765765, 267, 477, 1293, 20194], [0.8374413145539906, 211, 343, 1427, 20250]], [[0.46634311036083564, 284, 2245, 1105, 43694], [0.5770440251572327, 270, 1882, 1468, 43708]], [[0.8160286775060812, 369, 1068, 3187, 43760], [0.8398432562255088, 334, 933, 3322, 43795]], [[0.593172311428957, 498, 2517, 2198, 52080], [0.8194021432600113, 518, 1083, 3632, 52060]], [[0.4480171489817792, 208, 3397, 1463, 53212], [0.6889505549949546, 337, 2129, 2731, 53083]], [[0.7511269722013524, 241, 2409, 3999, 49451], [0.8138666666666666, 264, 1830, 4578, 49428]], [[0.806758530183727, 133, 1045, 2459, 34779], [0.8355033343918704, 163, 873, 2631, 34749]], [[0.723714682723483, 464, 1922, 3125, 48487], [0.7880743130492824, 400, 1505, 3542, 48551]], [[0.8276121272863944, 551, 825, 3303, 42745], [0.828158937012904, 458, 887, 3241, 42838]], [[0.653872786625779, 144, 3355, 3305, 55146], [0.761607060770433, 75, 2518, 4142, 55215]]], [[[0.8177559669863931, 205, 612, 1833, 23200], [0.8298337707786526, 230, 548, 1897, 23175]], [[0.5248713550600344, 72, 2975, 1683, 50390], [0.6640022050716649, 189, 2249, 2409, 50273]], [[0.7509303220839215, 252, 1689, 2926, 48029], [0.7917699553792762, 259, 1421, 3194, 48022]], [[0.5554808338937458, 686, 2619, 2065, 59502], [0.6474248642923341, 424, 2239, 2445, 59764]], [[0.2739236393176279, 21, 4448, 843, 51388], [0.6906090754671196, 105, 2445, 2846, 51304]], [[0.6726775956284153, 53, 2343, 2462, 47506], [0.7746255935711677, 227, 1624, 3181, 47332]], [[0.7730874979783277, 101, 1302, 2390, 35162], [0.7687795339742545, 86, 1333, 2359, 35177]], [[0.5942320590207915, 106, 2314, 1772, 48608], [0.7557885539536916, 186, 1491, 2595, 48528]], [[0.8253432907733076, 258, 1192, 3426, 42453], [0.8162372386971317, 252, 1260, 3358, 42459]], [[0.6914708442123586, 110, 2726, 3178, 53452], [0.8400500144272386, 126, 1537, 4367, 53436]]]]
una_pred_2iterations = [[[[0.24763386490340983, 14, 11592, 1910, 81359], [0.46901757548445244, 87, 9339, 4163, 81286]], [[0.4604068857589984, 2, 10342, 4413, 81867], [0.7586404821450535, 384, 5503, 9252, 81485]], [[0.2031980319803198, 7, 12949, 1652, 100412], [0.24385848999939935, 18, 12571, 2030, 100401]], [[0.37214423341590974, 65, 11340, 3380, 90775], [0.7665710774272839, 334, 5364, 9356, 90506]], [[0.31343345675417067, 161, 16342, 3767, 106750], [0.5178255372945638, 408, 12941, 7168, 106503]], [[0.5256616085763116, 453, 8706, 5075, 74426], [0.7929474043715847, 356, 4494, 9287, 74523]], [[0.48076642513251955, 213, 10464, 4943, 92020], [0.7728337236533958, 313, 5507, 9900, 91920]], [[0.3649906890130354, 71, 13228, 3822, 93327], [0.6619385342789598, 213, 8510, 8540, 93185]], [[0.3110519054189067, 17, 14464, 3269, 90254], [0.6467748019615239, 204, 9160, 8573, 90067]], [[0.2655863373926544, 57, 15080, 2737, 97146], [0.5438730721217735, 263, 11064, 6753, 96940]]], [[[0.6546546546546547, 1, 114, 109, 4186], [0.6546546546546547, 1, 114, 109, 4186]], [[0.7744, 0, 141, 242, 5551], [0.7744, 0, 141, 242, 5551]], [[0.5909090909090909, 18, 324, 247, 7323], [0.5909090909090909, 18, 324, 247, 7323]], [[0.07453416149068323, 0, 298, 12, 5774], [0.07453416149068323, 0, 298, 12, 5774]], [[0.10398613518197573, 0, 517, 30, 9773], [0.10398613518197573, 0, 517, 30, 9773]], [[0.32116788321167883, 2, 277, 66, 6987], [0.32116788321167883, 2, 277, 66, 6987]], [[0.03821656050955414, 0, 302, 6, 6580], [0.03821656050955414, 0, 302, 6, 6580]], [[0.14367816091954022, 3, 295, 25, 6237], [0.14367816091954022, 3, 295, 25, 6237]], [[0.4530386740331492, 2, 394, 164, 6772], [0.4530386740331492, 2, 394, 164, 6772]], [[0.05970149253731343, 0, 315, 10, 8900], [0.05970149253731343, 0, 315, 10, 8900]]], [[[0.15399833200799085, 72, 43547, 3970, 787035], [0.21600074857303267, 147, 41746, 5771, 786960]], [[0.08227682084462709, 11, 20981, 941, 772692], [0.15227272727272728, 29, 20113, 1809, 772674]], [[0.04678716073263616, 15, 31523, 774, 855088], [0.08940926024481106, 13, 30785, 1512, 855090]], [[0.12056821126528304, 9, 37322, 2559, 996754], [0.1771116543672462, 12, 36005, 3876, 996751]], [[0.06974015924918253, 23, 37246, 1397, 954040], [0.09527326440177253, 42, 36708, 1935, 954021]], [[0.09626329311522326, 5, 27784, 1480, 752731], [0.14681861348528016, 7, 26945, 2319, 752729]], [[0.06009078825270233, 1, 37476, 1198, 660685], [0.09584758904177025, 6, 36727, 1947, 660680]], [[0.09516026514119677, 4, 29891, 1572, 838773], [0.17007791603674846, 8, 28538, 2925, 838769]], [[0.08544197198169101, 4, 46151, 2156, 899405], [0.11599118856853227, 15, 45332, 2975, 899394]], [[0.10250072695551032, 11, 24681, 1410, 849058], [0.15897309306344112, 12, 23837, 2254, 849057]]], [[[0.4574898785425101, 0, 268, 113, 15869], [0.4574898785425101, 0, 268, 113, 15869]], [[0.1043956043956044, 0, 326, 19, 17097], [0.4700665188470067, 0, 239, 106, 17097]], [[0.3105022831050228, 20, 282, 68, 23080], [0.2885085574572127, 0, 291, 59, 23100]], [[0.38782051282051283, 26, 356, 121, 20287], [0.45652173913043476, 20, 330, 147, 20293]], [[0.1094224924012158, 11, 282, 18, 14581], [0.1094224924012158, 11, 282, 18, 14581]], [[0.0891089108910891, 0, 368, 18, 20284], [0.0891089108910891, 0, 368, 18, 20284]], [[0.25, 4, 266, 45, 17829], [0.28415300546448086, 3, 259, 52, 17830]], [[0.09154929577464789, 1, 257, 13, 20753], [0.13058419243986255, 2, 251, 19, 20752]], [[0.2504604051565378, 20, 387, 68, 28645], [0.4288052373158756, 25, 324, 131, 28640]], [[0.09421841541755889, 1, 422, 22, 30563], [0.09421841541755889, 1, 422, 22, 30563]]], [[[0.34988179669030733, 3, 272, 74, 16066], [0.3523809523809524, 0, 272, 74, 16069]], [[0.1336405529953917, 1, 375, 29, 22919], [0.26552462526766596, 1, 342, 62, 22919]], [[0.17857142857142858, 6, 316, 35, 21217], [0.128, 0, 327, 24, 21223]], [[0.35207823960880197, 12, 253, 72, 18983], [0.35207823960880197, 12, 253, 72, 18983]], [[0.36104513064133015, 8, 261, 76, 19155], [0.36104513064133015, 8, 261, 76, 19155]], [[0.04778156996587031, 0, 279, 7, 21164], [0.04778156996587031, 0, 279, 7, 21164]], [[0.2222222222222222, 9, 215, 32, 18104], [0.23157894736842105, 5, 214, 33, 18108]], [[0.08641975308641975, 0, 296, 14, 26402], [0.08641975308641975, 0, 296, 14, 26402]], [[0.030837004405286344, 0, 440, 7, 26391], [0.18661257606490872, 0, 401, 46, 26391]], [[0.1044776119402985, 0, 360, 21, 17559], [0.1044776119402985, 0, 360, 21, 17559]]], [[[0.6355745181697808, 169, 7262, 6480, 104801], [0.6906393765843583, 204, 6386, 7356, 104766]], [[0.7290945258970014, 328, 7026, 9896, 107550], [0.7557587229027535, 498, 6341, 10581, 107380]], [[0.6138006138006138, 247, 11456, 9300, 125829], [0.6792239237759818, 245, 9956, 10800, 125831]], [[0.4218075801749271, 80, 9836, 3617, 125021], [0.6034271725826194, 239, 7537, 5916, 124862]], [[0.5875472318054871, 126, 12427, 8941, 153521], [0.666276418756547, 277, 10555, 10813, 153370]], [[0.6127946127946128, 150, 11925, 9555, 164745], [0.7528569382786768, 292, 8337, 13143, 164603]], [[0.6632805768445875, 143, 7282, 7313, 118262], [0.6486486486486487, 205, 7491, 7104, 118200]], [[0.648141923436041, 328, 9093, 8677, 133158], [0.6817751220578591, 320, 8414, 9356, 133166]], [[0.6677227950918831, 395, 11141, 11591, 163497], [0.7073726318128785, 534, 10000, 12732, 163358]], [[0.5279276651596908, 212, 12736, 7240, 146165], [0.6737460460912789, 569, 9539, 10437, 145808]]], [[[0.6378050676200839, 229, 9091, 8206, 115074], [0.7197788206191568, 299, 7404, 9893, 115004]], [[0.6975091777523389, 186, 7477, 8835, 104252], [0.7175856065002902, 260, 7039, 9273, 104178]], [[0.6048219811609481, 190, 11431, 8893, 124326], [0.6564058808086112, 147, 10323, 10001, 124369]], [[0.3663186786256923, 29, 12900, 3737, 163934], [0.4144152699302027, 60, 12273, 4364, 163903]], [[0.5967486506577033, 83, 12394, 9232, 131471], [0.6379762648344784, 180, 11412, 10214, 131374]], [[0.6979907074063817, 210, 9605, 11342, 132851], [0.7400987902629478, 351, 8436, 12511, 132710]], [[0.6309717757914667, 286, 8095, 7165, 166272], [0.6834729178064897, 381, 7140, 8120, 166177]], [[0.6038423450188156, 311, 9690, 7622, 136115], [0.7117333916721359, 354, 7552, 9760, 136072]], [[0.5700890764181903, 89, 13666, 9120, 194277], [0.6344194312796209, 265, 12077, 10709, 194101]], [[0.4716143099410482, 196, 12890, 5840, 126604], [0.5704009389315867, 150, 11197, 7533, 126650]]], [[[0.7317073170731707, 128, 675, 1095, 20333], [0.8117128463476071, 117, 481, 1289, 20344]], [[0.38350419384902146, 119, 2527, 823, 43859], [0.5451895043731778, 143, 2041, 1309, 43835]], [[0.6911568656495334, 163, 1922, 2333, 43966], [0.6619847328244275, 127, 2087, 2168, 44002]], [[0.3798068778587159, 67, 3594, 1121, 52511], [0.39118735284224687, 68, 3552, 1163, 52510]], [[0.32460020415107177, 64, 3906, 954, 53356], [0.36515632837318174, 29, 3768, 1092, 53391]], [[0.3209747150530591, 0, 5183, 1225, 49692], [0.571301247771836, 4, 3844, 2564, 49688]], [[0.5295349811478843, 6, 2240, 1264, 34906], [0.7439562378683607, 55, 1396, 2108, 34857]], [[0.5176031038942377, 111, 3246, 1801, 48840], [0.6857926905326182, 221, 2298, 2749, 48730]], [[0.5450489102454092, 111, 2540, 1588, 43185], [0.735499184097315, 134, 1649, 2479, 43162]], [[0.47723382403286546, 12, 4569, 2091, 55278], [0.6420004065867047, 20, 3502, 3158, 55270]]], [[[0.799720214502215, 129, 730, 1715, 23276], [0.8077365876122496, 144, 691, 1754, 23261]], [[0.308334846558925, 0, 3809, 849, 50462], [0.4151649098945937, 3, 3437, 1221, 50459]], [[0.5561381863047502, 66, 2812, 1803, 48215], [0.5123278898495037, 31, 3015, 1600, 48250]], [[0.3184492904119072, 174, 3764, 920, 60014], [0.42167487684729066, 122, 3400, 1284, 60066]], [[0.08401231214919427, 0, 5059, 232, 51409], [0.08401231214919427, 0, 5059, 232, 51409]], [[0.3464512802887094, 6, 3797, 1008, 47553], [0.474001268230818, 8, 3310, 1495, 47551]], [[0.5649149922720247, 22, 2230, 1462, 35241], [0.6995296986587702, 41, 1684, 2008, 35222]], [[0.41312741312741313, 24, 3016, 1070, 48690], [0.6072573839662447, 40, 2287, 1799, 48674]], [[0.33303297891511985, 7, 3694, 924, 42704], [0.5989771359807461, 39, 2627, 1991, 42672]], [[0.404777882163468, 39, 4396, 1508, 53523], [0.6983295119554537, 57, 2706, 3198, 53505]]]]
baseline_2iterations = np.array(baseline_2iterations)
avr_pred_2iterations = np.array(avr_pred_2iterations)
una_pred_2iterations = np.array(una_pred_2iterations)
def dice_coefficient(mask1, mask2):
    intersection = np.sum(mask1 * mask2)
    total = np.sum(mask1) + np.sum(mask2)
    dice = (2.0 * intersection) / total
    return dice
# window = tk.Tk()
# window.withdraw()
# folder_path = filedialog.askdirectory()
#
# window.destroy()
# # LOAD IMAGES
# img = np.load(folder_path + str("/") + os.listdir(folder_path)[0])
# structures = np.load(folder_path + str("/") + os.listdir(folder_path)[1]).astype(int)
# ground_truth = np.zeros(structures.shape).astype(int)
#
# # CHOOSE ORGAN
# # 1=BrainStem,2=Chiasm,3=Mandible,4=OpticNerve_L,5=OpticNerve_R,6=Parotid_L,7=Parotid_R,8=Submandibular_L,9=Submandibular_R)
# organ_choice = 3
# ground_truth[structures == organ_choice] = 1
#
# # USE BOUNDING BOX
# z = np.any(ground_truth, axis=(1, 2))
# y = np.any(ground_truth, axis=(0, 2))
# x = np.any(ground_truth, axis=(0, 1))
# zmin, zmax = np.where(z)[0][[0, -1]]
# ymin, ymax = np.where(y)[0][[0, -1]]
# xmin, xmax = np.where(x)[0][[0, -1]]
# z_offset = 1
# xy_offset = 10
# zmin = max(0, zmin - z_offset)
# ymin = max(0, ymin - xy_offset)
# xmin = max(0, xmin - xy_offset)
# zmax = min(len(img), zmax + z_offset + 1)
# ymax = min(len(img[0]), ymax + xy_offset + 1)
# xmax = min(len(img[0][0]), xmax + xy_offset + 1)
#
# img = img[zmin:zmax, ymin:ymax, xmin:xmax]
# ground_truth = ground_truth[zmin:zmax, ymin:ymax, xmin:xmax]



def run_2iterations(img, ground_truth,w1,w2,w3):
    seed_points = convert_to_labels(automatic_contours(ground_truth))
    segmentation, probabilities = segment(img, seed_points,pred=predictions,w=[w1,w2,w3])
    uncertainty_field = calculate_uncertainty_fields(img, segmentation, probabilities)
    uncertainty, point, normal, chosen_axis = discreet_get_optimal_slice(uncertainty_field, True, True, True)
    if chosen_axis == "x":
        contours = create_contour(ground_truth[point])
    elif chosen_axis == "y":
        contours = create_contour(ground_truth[:, point, :])
    else:
        contours = create_contour(ground_truth[:, :, point])
    new_labeled_slice = convert_to_labels2d(contours, dil_size=3).astype(int)
    if chosen_axis == "x":
        seed_points[point][new_labeled_slice == 2] = 2
        seed_points[point][new_labeled_slice == 1] = 1
    elif chosen_axis == "y":
        seed_points[:, point, :][new_labeled_slice == 2] = 2
        seed_points[:, point, :][new_labeled_slice == 1] = 1
    else:
        seed_points[:, :, point][new_labeled_slice == 2] = 2
        seed_points[:, :, point][new_labeled_slice == 1] = 1
    segmentation2, probabilities = segment(img, seed_points,pred=predictions,w=[w1,w2,w3])
    return segmentation,segmentation2

def confidence_int(results,target_value,one_iteration = True):
    y = np.zeros(results.shape[0])
    confidence_interval = np.zeros(results.shape[0])
    results = results[:,:,target_value]
    for index,data in enumerate(results):
        lower_percentile = (100 - 95) / 2
        upper_percentile = 100 - lower_percentile
        lower_bound = np.percentile(data, lower_percentile)
        upper_bound = np.percentile(data, upper_percentile)
        y[index] = np.mean(data)
        confidence_interval[index] = (upper_bound-lower_bound)/2
    return y,confidence_interval
def plot_confidence(r1,r2,r3,target_value):
    x = np.array([i for i in range(r1.shape[0])])
    y,confidence_interval = confidence_int(r1,target_value)
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5, label='a')
    y,confidence_interval = confidence_int(r2,target_value)
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='b')
    y,confidence_interval = confidence_int(r3,target_value)
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='c')
    plt.xlabel('ROI')
    plt.ylabel('Dice')
    plt.title('Average Dice for different ROIs')
    plt.legend()
    plt.xticks(np.arange(min(x), max(x) + 1, 1))
    plt.show()

def plot_confidence2(r1,r2,r3,target_value,organ):
    x = np.array([0,1,2])
    y1,c1 = confidence_int(r1[:,:,0,:],target_value)
    y2,c2 = confidence_int(r1[:,:,1,:],target_value)
    y = np.array([0,y1[organ],y2[organ]])
    confidence_interval = np.array([0,c1[organ],c2[organ]])
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5, label='a',color='blue')
    plt.plot(x, y, '-',color='blue')
    y1,c1 = confidence_int(r2[:,:,0,:],target_value)
    y2,c2 = confidence_int(r2[:,:,1,:],target_value)
    y = np.array([0,y1[organ],y2[organ]])
    confidence_interval = np.array([0,c1[organ],c2[organ]])
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='b',color='orange')
    plt.plot(x, y, '-',color='orange')
    y1,c1 = confidence_int(r3[:,:,0,:],target_value)
    y2,c2 = confidence_int(r3[:,:,1,:],target_value)
    y = np.array([0,y1[organ],y2[organ]])
    confidence_interval = np.array([0,c1[organ],c2[organ]])
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='c',color='green')
    plt.plot(x, y, '-',color='green')
    plt.xlabel('iteration')
    plt.ylabel('Dice')
    plt.title('Average Dice for first 2 iterations')
    plt.legend()
    plt.xticks(np.arange(min(x), max(x) + 1, 1))
    plt.show()

def get_bbox(img,ground_truth):
    z = np.any(ground_truth, axis=(1, 2))
    y = np.any(ground_truth, axis=(0, 2))
    x = np.any(ground_truth, axis=(0, 1))
    zmin, zmax = np.where(z)[0][[0, -1]]
    ymin, ymax = np.where(y)[0][[0, -1]]
    xmin, xmax = np.where(x)[0][[0, -1]]
    z_offset = 1
    xy_offset = 10
    zmin = max(0, zmin - z_offset)
    ymin = max(0, ymin - xy_offset)
    xmin = max(0, xmin - xy_offset)
    zmax = min(len(img), zmax + z_offset + 1)
    ymax = min(len(img[0]), ymax + xy_offset + 1)
    xmax = min(len(img[0][0]), xmax + xy_offset + 1)
    return zmin,zmax,ymin,ymax,xmin,xmax


def false_positives(segmentation,ground_truth):
    return np.sum((segmentation == 1) & (ground_truth == 0))

def false_negatives(segmentation,ground_truth):
    return np.sum((segmentation == 0) & (ground_truth == 1))
def true_negatives(segmentation,ground_truth):
    return np.sum((segmentation == 0) & (ground_truth == 0))

def true_positives(segmentation,ground_truth):
    return np.sum((segmentation == 1) & (ground_truth == 1))
def synthetic_data():
    image = np.zeros((100,100))
    image = cv.circle(image, (20,50), 10, 1, -1)
    image = cv.circle(image,(80,50),10,1,-1)
    image[49:51,20:80] = 1

    seed_points = np.zeros(image.shape)
    seed_points[:,0] = 2
    seed_points[:,99] = 2
    seed_points[49:51,20:80] = 1

    segmentation1,prob = segment(image,seed_points)
    segmentation2,prob = segment(image,seed_points,pred=np.array([image]))
    plt.imshow(segmentation1,cmap='gray')
    plt.show()
    plt.imshow(segmentation2,cmap='gray')
    plt.show()

def load(chosen_organ,folder_path = None):
    global predictions
    if folder_path is None:
        window = tk.Tk()
        window.withdraw()
        folder_path = filedialog.askdirectory()
        window.destroy()
    img = np.load(folder_path.joinpath("img_ai.npy"))
    ground_truth = np.load(folder_path.joinpath("structures_ai.npy")).astype(int)
    predictions = []
    for i in range(1,7):
        prediction = np.load(folder_path.joinpath("maskpred_"+str(i)+".npy"))
        prediction[prediction != chosen_organ] = 0
        prediction[prediction != 0] = 1
        predictions.append(prediction.astype(int))
    predictions = np.array(predictions)
    ground_truth[ground_truth != chosen_organ] = 0
    ground_truth[ground_truth != 0] = 1
    ground_truth = ground_truth.astype(int)

    zmin,zmax,ymin,ymax,xmin,xmax = get_bbox(img,ground_truth)
    predictions = predictions[:,zmin:zmax,ymin:ymax,xmin:xmax]
    img = img[zmin:zmax, ymin:ymax, xmin:xmax]
    ground_truth = ground_truth[zmin:zmax, ymin:ymax, xmin:xmax]
    # seed_points = convert_to_labels(automatic_contours(ground_truth))
    # segmentation, prob = segment(img,seed_points,pred=predictions)
    #
    # if show:
    #     viewer = napari.Viewer()
    #     viewer.add_image(img, name="CT_SCAN", colormap="gray", interpolation2d="bicubic")
    #     viewer.add_labels(segmentation.astype(int),name='segmentation')
    #     viewer.add_labels(ground_truth.astype(int),name='ground truth')
    return img,ground_truth

def evaluate(chosen_organ,w1,w2,w3,baseline = False):
    path = Path(r'C:\Users\Bram\Documents\RP\miccai_data_numpy\part4')
    results = []
    for p in path.rglob("img.npy"):
        patient_base_path = p.parent
        patient_id = patient_base_path.stem
        img, ground_truth = load(chosen_organ, folder_path=patient_base_path)
        # seed_points = convert_to_labels(automatic_contours(ground_truth))
        # if baseline:
        #     segmentation,prob = segment(img,seed_points)
        # else:
        #     segmentation, prob = segment(img,seed_points,pred=predictions,w=weight)
        segmentation1,segmentation2 = run_2iterations(img,ground_truth,w1,w2,w3)
        values = []
        for seg in [segmentation1,segmentation2]:
            d1 = dice_coefficient(seg,ground_truth)
            fp1 = false_positives(seg,ground_truth)
            fn1 = false_negatives(seg,ground_truth)
            tp1 = true_positives(seg,ground_truth)
            tn1 = true_negatives(seg,ground_truth)
            values.append([d1,fp1,fn1,tp1,tn1])
        results.append(values)

    return results

file_path = 'data.txt'
results_per_w1 = []
w1 = 0.0
while w1 <= 1.0:
    print("very outer loop,w1 is ",w1)
    w2 = 0.0
    results_per_w2 = []
    while w2 <= 1.0:
        print("outer loop of w2")
        w3 = 1.0-w1-w2
        results_per_w3 = []
        for organ in range(1,10):
            # print("organ "+str(organ))
            results_per_w3.append(evaluate(organ,w1,w2,w3))
            with open(file_path, 'w') as file:
                file.write(str(results_per_w1))
        results_per_w2.append(results_per_w3)
        w2 += 0.1
    results_per_w1.append(results_per_w2)
    w1 += 0.1
results_per_w1 = np.array(results_per_w1)
print(results_per_w1.shape)


# w = 100
# while w <= 100:
#     results_for_w = [w]
#     for organ in range(1,10):
#         results = evaluate(organ,w)
#         results_for_w.append(results)
#     w *= 2
#     all_results.append(results_for_w)
#     with open(file_path, 'w') as file:
#         file.write(str(all_results))
def get_average(results):
    avr_patients = []
    for w in results:
        arr = [round(w[0],1)]
        for index in range(1,len(w)):
            avr = 0
            for patient in w[index]:
                dice,fp,fn,tp,tn,patient,organ = patient[0], patient[1], patient[2], patient[3], patient[4], patient[5], patient[6]
                # WE NOW TAKE THE AVERAGE OF:
                avr += fn
            avr /= len(w[index])

            arr.append(round(avr,3))
        print(arr)
        avr_patients.append(arr)

def avr_per_organ(results):
    averages = []
    for result in results:
        avr = 0
        for patient_res in result:
            avr += patient_res[0] # dice is at 0
        avr /= len(result)
        averages.append(round(avr,3))
    print(averages)

def avr_per_patient(results):
    avr = np.zeros(len(results[0]))
    for organ in results:
        for index,patient in enumerate(organ):
            avr[index] += patient[0]
    avr = [x/len(results) for x in avr]
    avr = [round(x,3) for x in avr]
    print(avr)
# avr_per_patient(results)
# avr_per_organ(results)

# get_average(extension_results)

if show:
    napari.run()

# for i in range(0,9):
# # plot_confidence(baseline_results,avr_pred_results,una_pred_results,0)
#     plot_confidence2(baseline_2iterations,avr_pred_2iterations,una_pred_2iterations,0,i)
