from pathlib import Path
import numpy as np
import SimpleITK as sitk
import os
import napari
import json
import nrrd
import tkinter as tk
from tkinter import filedialog
from segmentation.segmentation import *
from skimage.morphology import binary_dilation
from skimage.morphology import binary_erosion
from skimage.segmentation import flood
import cv2 as cv
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

from skimage.segmentation import random_walker
from uncertainty.uncertainty import calculate_uncertainty_fields
from slice_select.discreet_optimization import discreet_get_optimal_slice

global predictions

global show
show = False

mean_prediction = np.array([[[[0.2643884892086331, 0.7788976097038887], [0.5296073857149948, 0.5970347212353749], [0.22738579142146453, 0.7012111263919081], [0.35722742438919386, 0.7282267393819204], [0.37896746479993637, 0.7546385542168674], [0.492619926199262, 0.8035800677310111], [0.47715640700568157, 0.7720403494956313], [0.42853326208923326, 0.770558305830583], [0.3627155762387079, 0.71723844023013], [0.3319387614362558, 0.7629521843592434]], [[0.4572425828970332, 0.4572425828970332], [0.39221556886227543, 0.39221556886227543], [0.5522388059701493, 0.5522388059701493], [0.06853582554517133, 0.422279792746114], [0.14453781512605043, 0.23712948517940718], [0.31825795644891125, 0.4432624113475177], [0.03821656050955414, 0.03821656050955414], [0.07807807807807808, 0.07807807807807808], [0.5536723163841808, 0.5536723163841808], [0.030303030303030304, 0.030303030303030304]], [[0.20988368836696975, 0.7305190759799646], [0.11168820019745032, 0.3500880540064573], [0.05973815872255011, 0.11908007308372727], [0.1565437788018433, 0.4290903470129067], [0.09958099531988925, 0.14791303725270266], [0.1287046499744507, 0.17973694006700583], [0.1177899800767773, 0.5898055256801312], [0.12738664370341776, 0.17646549484803878], [0.127114875186109, 0.1859778321900525], [0.1581483696225685, 0.39624803957051513]], [[0.4574468085106383, 0.4574468085106383], [0.022922636103151862, 0.022922636103151862], [0.18313253012048192, 0.12853470437017994], [0.34330708661417325, 0.34330708661417325], [0.05194805194805195, 0.05194805194805195], [0.1111111111111111, 0.1111111111111111], [0.24581005586592178, 0.24581005586592178], [0.05054151624548736, 0.05054151624548736], [0.1257606490872211, 0.2361904761904762], [0.11666666666666667, 0.10660980810234541]], [[0.29577464788732394, 0.29577464788732394], [0.10722610722610723, 0.10722610722610723], [0.17587939698492464, 0.15503875968992248], [0.27860696517412936, 0.27860696517412936], [0.254278728606357, 0.254278728606357], [0.04778156996587031, 0.04778156996587031], [0.125, 0.125], [0.05642633228840126, 0.05642633228840126], [0.06493506493506493, 0.09787234042553192], [0.06598984771573604, 0.06598984771573604]], [[0.6101064898533253, 0.7748107478579153], [0.7624799786438868, 0.8295609663185296], [0.6885686370297998, 0.8018596413548815], [0.5171948388489985, 0.7780999783596624], [0.6979459847895083, 0.7659809471213586], [0.6370204980308246, 0.8325545962417471], [0.7334432989690721, 0.7504638585132841], [0.6858467023172905, 0.755335019783356], [0.7327886136004217, 0.7938489501124025], [0.6188987897326772, 0.7802083039318073]], [[0.6514172809484003, 0.8021822849807445], [0.7149317798558945, 0.7955007453584496], [0.6852386720084475, 0.8004427667243778], [0.5911387163561077, 0.743579888892771], [0.6633093091281927, 0.7315831164422315], [0.7149258250075688, 0.8042178323545115], [0.6826462128475551, 0.747228465846318], [0.6463519634634822, 0.8257511803145421], [0.6782935040565152, 0.7571019025280167], [0.667402200296315, 0.8050317882953866]], [[0.7606955561689208, 0.7616345062429057], [0.3853459972862958, 0.508385972554999], [0.7030096536059057, 0.6923758865248227], [0.3295073282712343, 0.6982896846606093], [0.34822028206850236, 0.454559529338907], [0.4776017325886242, 0.5052413316438198], [0.553493880773786, 0.7806909315237508], [0.5275354026605635, 0.5094811112744377], [0.5206654090207512, 0.534608695652174], [0.5518987341772152, 0.5394064572236112]], [[0.8130337078651685, 0.7889865802869042], [0.4015775034293553, 0.6778650772148469], [0.6795439302481556, 0.700713893465129], [0.34145516074450083, 0.4498609520693604], [0.267472240365774, 0.7213077011626569], [0.48406843509653114, 0.5969889982628837], [0.6710108604845447, 0.7461206207006879], [0.5020739404869251, 0.48663594470046084], [0.388002773925104, 0.48810487133840424], [0.47761916283571254, 0.7805090655509066]]], [[[0.26794871794871794, 0.7858723554926087], [0.5283582089552239, 0.782466870540265], [0.23114178471969973, 0.710923408560996], [0.35949339683914266, 0.7336979037202751], [0.3833148118749008, 0.7602447951040979], [0.4994342145869766, 0.8096356275303643], [0.4805859430020189, 0.7771543985637342], [0.4328251760720335, 0.7802020893988697], [0.3639351746176672, 0.7231030577576444], [0.3332106038291605, 0.7669955399378294]], [[0.48507462686567165, 0.48507462686567165], [0.4168012924071082, 0.4168012924071082], [0.5763779527559055, 0.5763779527559055], [0.0625, 0.47144948755490484], [0.12265758091993186, 0.22082018927444794], [0.32582322357019067, 0.4352517985611511], [0.03821656050955414, 0.03821656050955414], [0.07784431137724551, 0.07784431137724551], [0.5696846388606307, 0.5696846388606307], [0.030303030303030304, 0.030303030303030304]], [[0.2046464532823311, 0.7071684215986306], [0.10816625075294725, 0.33398261911896915], [0.057743097238895556, 0.11442872941039521], [0.1544426494345719, 0.42421767119824183], [0.10064927110131079, 0.14762951634486715], [0.1252080399436692, 0.1721288471732826], [0.11443597672323537, 0.16660750207076086], [0.12559840623234517, 0.1737067469042935], [0.11822353581706463, 0.17306858252720106], [0.14279624893435636, 0.3513142286320784]], [[0.4632768361581921, 0.4632768361581921], [0.02857142857142857, 0.02857142857142857], [0.18536585365853658, 0.13577023498694518], [0.3548387096774194, 0.3548387096774194], [0.05177993527508091, 0.05177993527508091], [0.08374384236453201, 0.08374384236453201], [0.25139664804469275, 0.25139664804469275], [0.05054151624548736, 0.05054151624548736], [0.11885245901639344, 0.2260536398467433], [0.11789473684210526, 0.10660980810234541]], [[0.3004694835680751, 0.3004694835680751], [0.11162790697674418, 0.11162790697674418], [0.18546365914786966, 0.17391304347826086], [0.285, 0.285], [0.2613065326633166, 0.2613065326633166], [0.04778156996587031, 0.04778156996587031], [0.125, 0.125], [0.07453416149068323, 0.07453416149068323], [0.06493506493506493, 0.09787234042553192], [0.06598984771573604, 0.06598984771573604]], [[0.6155077538769385, 0.7838619129414722], [0.7593215730260698, 0.8272369524546803], [0.6895791889824024, 0.8025746310065476], [0.5187067474048442, 0.7820529542193818], [0.6944937298890326, 0.7887060583395662], [0.6397022332506204, 0.8398698670492097], [0.7392805156997296, 0.8255419667009563], [0.6854682454251884, 0.7618239383751673], [0.7332095490716181, 0.7958127782456985], [0.6150190750284452, 0.7741991192470425]], [[0.6543266301035954, 0.8097349428784103], [0.7117676553399931, 0.8044753718106153], [0.68532950932103, 0.801548445861323], [0.5867166354361857, 0.7373807018180498], [0.6639428606016585, 0.736716756450241], [0.7160650968269843, 0.8133415755099846], [0.6889332003988036, 0.7533348578397744], [0.6486021183427524, 0.8330873347360488], [0.6807871079072615, 0.7608957885351655], [0.6686976389946687, 0.8092207685794663]], [[0.7700055959709009, 0.7696289905090595], [0.3872137837225119, 0.6398154719659332], [0.7110098276598775, 0.7041297935103245], [0.3383102055155454, 0.7031646414741621], [0.34915311085024314, 0.6702716961223951], [0.4769566716469371, 0.5099391014592669], [0.5602696272799366, 0.7894407997500781], [0.5348308217230594, 0.5185293259410563], [0.5274725274725275, 0.5396494881138296], [0.5545098868562969, 0.5458685751463891]], [[0.809287646528404, 0.7923827217835578], [0.3973168214654283, 0.6767552828902522], [0.6800542740841248, 0.7085729937003561], [0.3470042194092827, 0.4588674346908973], [0.2642003601244066, 0.7273147612992718], [0.47734806629834253, 0.5917297612114153], [0.6761936785474109, 0.7560975609756098], [0.4965467102871683, 0.48719366132301456], [0.38650200034788657, 0.48497644956959557], [0.4820600439345863, 0.7920950017724211]]], [[[0.2738886050076648, 0.7955849502868906], [0.5299442896935933, 0.7762320981574952], [0.23549302578346717, 0.7225609756097561], [0.36470141563161035, 0.7409154871285489], [0.39031722173878647, 0.7724547343425349], [0.5082633990629666, 0.8168294759028819], [0.4871001031991744, 0.7864875925443655], [0.43868723802728976, 0.7954182386730566], [0.36826265389876883, 0.7353539605697046], [0.33578860141791733, 0.7746966488521394]], [[0.49049429657794674, 0.49049429657794674], [0.46112115732368897, 0.46112115732368897], [0.6176218990590248, 0.6176218990590248], [0.0625, 0.5047619047619047], [0.10362694300518134, 0.22432859399684044], [0.340036563071298, 0.4384057971014493], [0.03821656050955414, 0.03821656050955414], [0.08358208955223881, 0.08358208955223881], [0.5717367853290184, 0.5717367853290184], [0.030303030303030304, 0.030303030303030304]], [[0.20634950400360041, 0.7045496263275206], [0.10993075566642295, 0.3300362428269405], [0.05851814062359331, 0.11522897318699234], [0.15693598966980263, 0.42630297126156846], [0.10419469242998655, 0.1529403351529165], [0.1270866645346978, 0.17397806580259223], [0.11623890037708308, 0.1674596974646687], [0.1270030026458959, 0.17681762970674997], [0.11712711484921053, 0.17197476293022027], [0.14176476864530355, 0.3435285223800674]], [[0.48140900195694714, 0.48140900195694714], [0.03418803418803419, 0.03418803418803419], [0.1925925925925926, 0.17480719794344474], [0.3671497584541063, 0.3671497584541063], [0.0641025641025641, 0.0641025641025641], [0.08415841584158416, 0.08415841584158416], [0.26038781163434904, 0.26038781163434904], [0.06428571428571428, 0.06428571428571428], [0.11522633744855967, 0.22957198443579765], [0.11764705882352941, 0.12578616352201258]], [[0.31678486997635935, 0.31678486997635935], [0.12037037037037036, 0.12037037037037036], [0.20100502512562815, 0.17857142857142858], [0.2892768079800499, 0.2892768079800499], [0.27411167512690354, 0.27411167512690354], [0.04778156996587031, 0.04778156996587031], [0.14545454545454545, 0.14545454545454545], [0.07453416149068323, 0.07453416149068323], [0.0815450643776824, 0.10993657505285412], [0.06598984771573604, 0.06598984771573604]], [[0.6269278452764692, 0.7915602629045088], [0.7648106294089446, 0.8327159290310002], [0.6942492208030312, 0.8069300069300069], [0.5200129813933362, 0.7852167856520982], [0.6967373327319201, 0.7936320438132567], [0.6458436417615042, 0.8481064693489543], [0.7485954471680053, 0.8305182121107664], [0.6899419313212417, 0.7691955676135064], [0.7399358651578194, 0.802450377444951], [0.6192900200937709, 0.7782983399849616]], [[0.6610414291144052, 0.8167874159650154], [0.7161454321368048, 0.8131304496495128], [0.6906340461294238, 0.8062302457359264], [0.584848104968451, 0.7392174704276615], [0.6702931399214264, 0.7437875865199137], [0.7225456190619816, 0.8249018869953229], [0.7002720303355041, 0.7668709321356526], [0.655609100078449, 0.8415427655361016], [0.6872261449582764, 0.7675803278688524], [0.6720521089434529, 0.8136746508628968]], [[0.7821641579096847, 0.7855676151364036], [0.39282470481380566, 0.6492109038737446], [0.7188835089718029, 0.71524926686217], [0.34573074908328966, 0.7105963791267306], [0.35250836120401335, 0.6757858739971064], [0.4772359602495956, 0.5128558310376492], [0.5654596100278552, 0.8009471191791634], [0.544042913608131, 0.5309069901790873], [0.538829969209716, 0.5500086370703058], [0.5597030752916224, 0.551477752517051]], [[0.8039837030330467, 0.7957338279619754], [0.39434677697345744, 0.6755641166758393], [0.6851371639142896, 0.7157117462053877], [0.35153755671315745, 0.4727738629083921], [0.25911330049261083, 0.7341625014529816], [0.46950444726810675, 0.5800470865214832], [0.686693822131704, 0.7652916073968705], [0.4926847110460863, 0.5100358422939069], [0.38521875544709777, 0.7652539036871802], [0.48919449901768175, 0.8040680406804068]]], [[[0.2842813610970036, 0.8022753517813609], [0.5349333068874894, 0.7765835247784706], [0.24350961538461538, 0.7391062170615708], [0.3732088580112896, 0.7535957139913455], [0.4007390518122494, 0.7885577232443184], [0.5193466948322943, 0.8281934750852135], [0.5003978841922951, 0.8067591944925082], [0.4499354436578959, 0.8121355132310804], [0.3764042388684222, 0.7496702533842415], [0.3405683803917962, 0.7926744301781626]], [[0.49897750511247446, 0.49897750511247446], [0.5102040816326531, 0.5102040816326531], [0.6836638338054769, 0.6836638338054769], [0.0625, 0.5482758620689655], [0.10051993067590988, 0.21337579617834396], [0.3339587242026266, 0.4570383912248629], [0.03821656050955414, 0.03821656050955414], [0.10588235294117647, 0.10588235294117647], [0.5598194130925508, 0.5598194130925508], [0.030303030303030304, 0.030303030303030304]], [[0.21446057819887498, 0.7146998255486038], [0.11764201867877645, 0.33881467544684857], [0.06288366521934421, 0.12297340410104701], [0.1658131042877156, 0.4395097164578566], [0.11312393474555636, 0.16553454356109915], [0.13507403279732527, 0.18524138358158115], [0.12409112942317015, 0.17382485435977263], [0.13413514234084783, 0.5178613121643708], [0.12102715627004645, 0.17984717883088042], [0.14876501647825932, 0.35338393025152104]], [[0.5107212475633528, 0.5107212475633528], [0.06179775280898876, 0.06179775280898876], [0.19402985074626866, 0.19950124688279303], [0.393026941362916, 0.393026941362916], [0.06962025316455696, 0.06962025316455696], [0.0794044665012407, 0.0794044665012407], [0.2644628099173554, 0.2644628099173554], [0.06428571428571428, 0.06428571428571428], [0.1111111111111111, 0.24324324324324326], [0.12916666666666668, 0.12916666666666668]], [[0.3443396226415094, 0.3443396226415094], [0.12873563218390804, 0.12873563218390804], [0.2123456790123457, 0.20654911838790932], [0.3121951219512195, 0.3121951219512195], [0.3069306930693069, 0.3069306930693069], [0.04778156996587031, 0.04778156996587031], [0.17667844522968199, 0.17667844522968199], [0.08615384615384615, 0.08615384615384615], [0.1059322033898305, 0.1375], [0.06598984771573604, 0.06598984771573604]], [[0.6445965770171149, 0.802624430607213], [0.7786599137636028, 0.8435449288545254], [0.7084280389126284, 0.8169379310344828], [0.5255151580537275, 0.7900461150265379], [0.7099931369916151, 0.8024424510969416], [0.6599128139006569, 0.8559962957246489], [0.7634301796208923, 0.8405519356075124], [0.6998537959562101, 0.7812459102211753], [0.7545937977149476, 0.8166819875175383], [0.630321633524623, 0.7849914460521356]], [[0.6747942930474824, 0.8257697215587475], [0.7321517057366114, 0.8300136425648021], [0.7036647270026, 0.8146128060905631], [0.5855965183914299, 0.7419013956200123], [0.6825325280206737, 0.754167020403543], [0.7359250529582003, 0.8402614098992929], [0.7177049047096591, 0.7852486355366889], [0.668870236945703, 0.85271706751121], [0.6991027141503651, 0.7770944018424979], [0.6817627814484573, 0.820026989066674]], [[0.7953823953823954, 0.8028588445503275], [0.4013605442176871, 0.6621695533272561], [0.7382132238425598, 0.728040786598689], [0.361595579347263, 0.723640693213388], [0.36106958976914133, 0.6940473095918898], [0.47970135324311713, 0.8309068584458866], [0.5844078555842095, 0.8151582986888392], [0.5605006954102921, 0.5527210884353742], [0.5626581210996795, 0.5687542545949625], [0.5681552986103745, 0.5600430802369413]], [[0.8017144146176404, 0.7971316215591024], [0.39379310344827584, 0.6791354945968412], [0.6994520547945206, 0.7259680476577308], [0.3600802407221665, 0.6166503974341097], [0.24962852897473997, 0.735338873931874], [0.4671439936356404, 0.5717246484085863], [0.6982611660415956, 0.7800632911392406], [0.49127960345144117, 0.7675298225196392], [0.38816362053959963, 0.7716453047345017], [0.49578790882061446, 0.8215668202764977]]], [[[0.30200288817730897, 0.8123198550605287], [0.5515888583758337, 0.7855951169888098], [0.259047619047619, 0.7731321128154379], [0.38902445637438315, 0.7710508002783577], [0.4258149336839256, 0.8193206184403566], [0.5413333333333333, 0.8535862477771191], [0.5371660591519402, 0.8358976215472613], [0.4763670064874884, 0.8351509087877272], [0.39291683606631433, 0.7705645436548569], [0.3502933626696003, 0.8187055016181229]], [[0.536697247706422, 0.536697247706422], [0.6569536423841059, 0.6569536423841059], [0.7509881422924901, 0.7509881422924901], [0.0804953560371517, 0.5878136200716846], [0.10380622837370242, 0.21621621621621623], [0.3300970873786408, 0.48363636363636364], [0.03821656050955414, 0.03821656050955414], [0.12244897959183673, 0.12244897959183673], [0.5550351288056206, 0.5550351288056206], [0.030303030303030304, 0.030303030303030304]], [[0.23935375592482616, 0.7510895634009851], [0.1442202144726843, 0.3699528440907751], [0.0777662260507946, 0.14438839848675913], [0.19062075215224286, 0.47822208726347953], [0.13908619696678826, 0.1967228334029615], [0.16193493741569157, 0.22327215458234903], [0.14462393940846555, 0.19675182651589185], [0.15858721712180573, 0.5719441499560147], [0.1388273803793203, 0.7140326291017742], [0.17798529565490087, 0.38785648574057036]], [[0.5719626168224299, 0.5719626168224299], [0.0886426592797784, 0.0886426592797784], [0.23557692307692307, 0.23357664233576642], [0.42813455657492355, 0.42813455657492355], [0.10461538461538461, 0.10461538461538461], [0.08415841584158416, 0.08415841584158416], [0.3183023872679045, 0.3183023872679045], [0.1111111111111111, 0.1111111111111111], [0.1488933601609658, 0.2962962962962963], [0.17269076305220885, 0.19801980198019803]], [[0.4, 0.4], [0.174496644295302, 0.174496644295302], [0.2559241706161137, 0.2324455205811138], [0.37962962962962965, 0.37962962962962965], [0.38028169014084506, 0.38028169014084506], [0.04778156996587031, 0.04778156996587031], [0.23728813559322035, 0.23728813559322035], [0.12650602409638553, 0.12650602409638553], [0.14522821576763487, 0.21073558648111332], [0.095, 0.095]], [[0.687779819972666, 0.8214065518516996], [0.8062386310045139, 0.8606290847042916], [0.7394928073557764, 0.8356544445653357], [0.5406300053390283, 0.7987217687956125], [0.7368574851699249, 0.8084990909337603], [0.692275348390197, 0.8669152958005517], [0.7903743750254054, 0.8549711158406811], [0.7253777280358142, 0.804629749708209], [0.7766894437371716, 0.8401258470474346], [0.6575207264113699, 0.8014223352895262]], [[0.7030486902471511, 0.8367067119352312], [0.7649591685226429, 0.8599878485114426], [0.727678162323976, 0.829732698645185], [0.5959995009772528, 0.7475692932810912], [0.708901173618707, 0.7765245864935211], [0.769253065128547, 0.8681069089372491], [0.744841788444022, 0.8141302727679237], [0.6964474403352159, 0.8671406491499227], [0.7180266283630738, 0.792142412289807], [0.7006750241080039, 0.8274459136267421]], [[0.8045845272206303, 0.8180730101735487], [0.4193982936686125, 0.6758747697974218], [0.7593627724986026, 0.7526451243923363], [0.3872499152255002, 0.752355142599045], [0.3866231647634584, 0.729855436832181], [0.4924224761016554, 0.8306686688455084], [0.6409073433294886, 0.8325312800769971], [0.597843665768194, 0.827502483169628], [0.6113736353267069, 0.8201612903225807], [0.5857414047669268, 0.8027138011069452]], [[0.8071508379888268, 0.8067303319690768], [0.410300136425648, 0.6837867851193781], [0.7102574581119738, 0.7567424643046008], [0.38534822601839686, 0.660425304266417], [0.24091587854654056, 0.735632183908046], [0.4870384917517675, 0.7710753091045335], [0.7219594594594595, 0.7969782813975449], [0.5041894353369764, 0.780963469655072], [0.4054426455390975, 0.7862496769191005], [0.5222016079158937, 0.8398711389046807]]], [[[0.3638882197060949, 0.8368293053655571], [0.7262786292405717, 0.8267239695252979], [0.32454036770583533, 0.8030230059645093], [0.5106874059207225, 0.8014400443090557], [0.5919648677393899, 0.8429551654771419], [0.631815143702855, 0.861025085165686], [0.7033173804556796, 0.8949650110940434], [0.6563878371521137, 0.8622836916622968], [0.531809555243832, 0.8255209174608302], [0.40800602222911037, 0.8331418278935436]], [[0.5377358490566038, 0.5377358490566038], [0.7152875175315568, 0.7152875175315568], [0.801125703564728, 0.801125703564728], [0.09202453987730061, 0.612736660929432], [0.1264957264957265, 0.22712933753943218], [0.340080971659919, 0.5135135135135135], [0.05063291139240506, 0.05063291139240506], [0.2422680412371134, 0.2422680412371134], [0.7204968944099379, 0.7204968944099379], [0.0650887573964497, 0.0650887573964497]], [[0.43756684058722495, 0.886054653753467], [0.5545728385566878, 0.7161328488126426], [0.3623707339059018, 0.8803615475027728], [0.4689589665653495, 0.8849685450408246], [0.3745430915441475, 0.8551975910677645], [0.44274769101595296, 0.7790020748141732], [0.4223529649622935, 0.896507422251393], [0.5149630871701716, 0.8928614359555579], [0.3688154417422139, 0.8862821397463887], [0.5529231944975163, 0.856545842217484]], [[0.7236641221374046, 0.7236641221374046], [0.7093425605536332, 0.7475083056478405], [0.5608108108108109, 0.5608108108108109], [0.5540540540540541, 0.5540540540540541], [0.4489795918367347, 0.4489795918367347], [0.08888888888888889, 0.08888888888888889], [0.6904376012965965, 0.6904376012965965], [0.5044642857142857, 0.5044642857142857], [0.2597402597402597, 0.41736227045075125], [0.37398373983739835, 0.48493543758967]], [[0.6608391608391608, 0.6608391608391608], [0.7033898305084746, 0.7033898305084746], [0.649546827794562, 0.649546827794562], [0.5482233502538071, 0.5482233502538071], [0.7393939393939394, 0.7393939393939394], [0.04778156996587031, 0.04778156996587031], [0.5609195402298851, 0.5609195402298851], [0.5011086474501109, 0.5011086474501109], [0.31910946196660483, 0.41043478260869565], [0.41338582677165353, 0.41338582677165353]], [[0.8049281314168378, 0.8708692459320527], [0.869954035208405, 0.8844843984904734], [0.8345397858207944, 0.8613003260091706], [0.638483675697132, 0.8258652399264337], [0.8420216988621329, 0.8614471817361021], [0.7869330691325407, 0.8783253815602128], [0.8719898605830165, 0.8833144403408052], [0.8012779140312379, 0.8510259245607569], [0.8272742914730968, 0.867043813761924], [0.7608872793119058, 0.8338937077953268]], [[0.7918193963892981, 0.8668501471006927], [0.8612424150993999, 0.9061321056333526], [0.815577617842005, 0.8417530761786257], [0.6790393013100436, 0.7662681197756851], [0.7907912875654811, 0.8351316242941598], [0.8546349248570289, 0.9095720550430969], [0.8271381403770369, 0.8681107759802578], [0.8041027657622231, 0.8867327197045202], [0.8066485924949958, 0.8333333333333334], [0.7605010594540695, 0.8411685787038304]], [[0.8087959238401716, 0.8341477436044841], [0.4838160136286201, 0.7024425031199857], [0.8414526129317981, 0.8442559753276793], [0.5407673860911271, 0.8287396937573616], [0.4609015639374425, 0.8261512222853894], [0.6822762903390003, 0.8251698879181008], [0.8190693133745526, 0.8520599250936329], [0.7517977267455347, 0.849989524408129], [0.8114495798319328, 0.8421052631578947], [0.6526189042745334, 0.8283250587927881]], [[0.8030987734021949, 0.8171240395170143], [0.49133504492939667, 0.7026517700901871], [0.7791225416036308, 0.8058444774640912], [0.5255581668625147, 0.7282782352218262], [0.2913309700290042, 0.7569293943196076], [0.6678571428571428, 0.7847886641637398], [0.7967015540754837, 0.855300644774329], [0.6357943309162821, 0.8255179934569248], [0.779600205023065, 0.8118471181024948], [0.6569211739570449, 0.8472248712569139]]]])
unanimous_votes = np.array([[[[0.2643884892086331, 0.7788976097038887], [0.5296073857149948, 0.5970347212353749], [0.22738579142146453, 0.7012111263919081], [0.35722742438919386, 0.7282267393819204], [0.37896746479993637, 0.7546385542168674], [0.492619926199262, 0.8035800677310111], [0.47715640700568157, 0.7720403494956313], [0.42853326208923326, 0.770558305830583], [0.3627155762387079, 0.71723844023013], [0.3319387614362558, 0.7629521843592434]], [[0.4572425828970332, 0.4572425828970332], [0.39221556886227543, 0.39221556886227543], [0.5522388059701493, 0.5522388059701493], [0.06853582554517133, 0.422279792746114], [0.14453781512605043, 0.23712948517940718], [0.31825795644891125, 0.4432624113475177], [0.03821656050955414, 0.03821656050955414], [0.07807807807807808, 0.07807807807807808], [0.5536723163841808, 0.5536723163841808], [0.030303030303030304, 0.030303030303030304]], [[0.20988368836696975, 0.7305190759799646], [0.11168820019745032, 0.3500880540064573], [0.05973815872255011, 0.11908007308372727], [0.1565437788018433, 0.4290903470129067], [0.09958099531988925, 0.14791303725270266], [0.1287046499744507, 0.17973694006700583], [0.1177899800767773, 0.5898055256801312], [0.12738664370341776, 0.17646549484803878], [0.127114875186109, 0.1859778321900525], [0.1581483696225685, 0.39624803957051513]], [[0.4574468085106383, 0.4574468085106383], [0.022922636103151862, 0.022922636103151862], [0.18313253012048192, 0.12853470437017994], [0.34330708661417325, 0.34330708661417325], [0.05194805194805195, 0.05194805194805195], [0.1111111111111111, 0.1111111111111111], [0.24581005586592178, 0.24581005586592178], [0.05054151624548736, 0.05054151624548736], [0.1257606490872211, 0.2361904761904762], [0.11666666666666667, 0.10660980810234541]], [[0.29577464788732394, 0.29577464788732394], [0.10722610722610723, 0.10722610722610723], [0.17587939698492464, 0.15503875968992248], [0.27860696517412936, 0.27860696517412936], [0.254278728606357, 0.254278728606357], [0.04778156996587031, 0.04778156996587031], [0.125, 0.125], [0.05642633228840126, 0.05642633228840126], [0.06493506493506493, 0.09787234042553192], [0.06598984771573604, 0.06598984771573604]], [[0.6101064898533253, 0.7748107478579153], [0.7624799786438868, 0.8295609663185296], [0.6885686370297998, 0.8018596413548815], [0.5171948388489985, 0.7780999783596624], [0.6979459847895083, 0.7659809471213586], [0.6370204980308246, 0.8325545962417471], [0.7334432989690721, 0.7504638585132841], [0.6858467023172905, 0.755335019783356], [0.7327886136004217, 0.7938489501124025], [0.6188987897326772, 0.7802083039318073]], [[0.6514172809484003, 0.8021822849807445], [0.7149317798558945, 0.7955007453584496], [0.6852386720084475, 0.8004427667243778], [0.5911387163561077, 0.743579888892771], [0.6633093091281927, 0.7315831164422315], [0.7149258250075688, 0.8042178323545115], [0.6826462128475551, 0.747228465846318], [0.6463519634634822, 0.8257511803145421], [0.6782935040565152, 0.7571019025280167], [0.667402200296315, 0.8050317882953866]], [[0.7606955561689208, 0.7616345062429057], [0.3853459972862958, 0.508385972554999], [0.7030096536059057, 0.6923758865248227], [0.3295073282712343, 0.6982896846606093], [0.34822028206850236, 0.454559529338907], [0.4776017325886242, 0.5052413316438198], [0.553493880773786, 0.7806909315237508], [0.5275354026605635, 0.5094811112744377], [0.5206654090207512, 0.534608695652174], [0.5518987341772152, 0.5394064572236112]], [[0.8130337078651685, 0.7889865802869042], [0.4015775034293553, 0.6778650772148469], [0.6795439302481556, 0.700713893465129], [0.34145516074450083, 0.4498609520693604], [0.267472240365774, 0.7213077011626569], [0.48406843509653114, 0.5969889982628837], [0.6710108604845447, 0.7461206207006879], [0.5020739404869251, 0.48663594470046084], [0.388002773925104, 0.48810487133840424], [0.47761916283571254, 0.7805090655509066]]], [[[0.2725645614932242, 0.7933593921560016], [0.5260743842855718, 0.7822715585846631], [0.23476107050081557, 0.7193848573550614], [0.3631647211413748, 0.7381857237276933], [0.3872015206114125, 0.762970498474059], [0.5044619961021644, 0.8149642842729731], [0.4836349995310888, 0.7806552727815509], [0.4360641139804096, 0.7799039780521262], [0.3675050118461819, 0.7263871240999576], [0.33500436922227844, 0.7715151515151515]], [[0.4830188679245283, 0.4830188679245283], [0.42165709598031176, 0.42165709598031176], [0.5642683912691997, 0.5642683912691997], [0.06853582554517133, 0.4742268041237113], [0.11663807890222985, 0.21518987341772153], [0.3269565217391304, 0.4452423698384201], [0.03821656050955414, 0.03821656050955414], [0.07784431137724551, 0.07784431137724551], [0.5646817248459959, 0.5646817248459959], [0.030303030303030304, 0.030303030303030304]], [[0.20538777346605927, 0.7106413332468712], [0.10922382283379918, 0.33611246121060306], [0.05808929428708593, 0.11567988833313947], [0.155333087285477, 0.42567252371326386], [0.09962005147689668, 0.14838339939825207], [0.12658308814123065, 0.1743842057733628], [0.11058243662006198, 0.1648820240689851], [0.12648597242035187, 0.1759810437496388], [0.11955381087488826, 0.17624578775955874], [0.1440539581114661, 0.3545202578555635]], [[0.46037735849056605, 0.46037735849056605], [0.02857142857142857, 0.02857142857142857], [0.18536585365853658, 0.13506493506493505], [0.3548387096774194, 0.3548387096774194], [0.05177993527508091, 0.05177993527508091], [0.08374384236453201, 0.08374384236453201], [0.25139664804469275, 0.25139664804469275], [0.05054151624548736, 0.05054151624548736], [0.11475409836065574, 0.2260536398467433], [0.11789473684210526, 0.10660980810234541]], [[0.3004694835680751, 0.3004694835680751], [0.11162790697674418, 0.11162790697674418], [0.19, 0.16879795396419436], [0.2807017543859649, 0.2807017543859649], [0.26, 0.26], [0.04778156996587031, 0.04778156996587031], [0.12546125461254612, 0.12546125461254612], [0.06853582554517133, 0.06853582554517133], [0.06911447084233262, 0.09787234042553192], [0.06598984771573604, 0.06598984771573604]], [[0.6253599443947969, 0.7896342737722049], [0.7634967553426426, 0.8296706837661919], [0.6927377715315756, 0.8052336863114709], [0.521992552215446, 0.783504258647662], [0.6939599337249586, 0.7893764557843164], [0.6459554513481829, 0.8425738774465907], [0.7405213764337852, 0.7651645095898956], [0.6910961105753777, 0.7657842466868549], [0.7370680517277931, 0.7997787610619469], [0.6207563529647169, 0.7788663199931048]], [[0.660063752276867, 0.8131868131868132], [0.7162733492197709, 0.8065363490601439], [0.6900152273221666, 0.8056400488955852], [0.5823783738404064, 0.7377628749498852], [0.6710248840151835, 0.7428732871874558], [0.7225335985053939, 0.8187357401691048], [0.6938656927035777, 0.7582082730250629], [0.6537156493530706, 0.8368350189435451], [0.6849933155080213, 0.7646673479548254], [0.6689068100358423, 0.8123217028746983]], [[0.7739938080495357, 0.7748058671268335], [0.38830992297236067, 0.6414222222222222], [0.7146105741898806, 0.7086267605633803], [0.34925060996863017, 0.715627894667196], [0.3526658866789236, 0.6736897550697919], [0.47189709120407924, 0.503409222235063], [0.5593625498007968, 0.7901933050447902], [0.5387338903837984, 0.5233183204997821], [0.5319622964867181, 0.542179109648363], [0.5541989595498461, 0.547014115092291]], [[0.8089585666293393, 0.7975970425138632], [0.3935161234695637, 0.6709571409009996], [0.6802349405818877, 0.7052966394689532], [0.3501513622603431, 0.4709470304975923], [0.2557182820470627, 0.7245502031340685], [0.4682880305197902, 0.5823304960375697], [0.6723549488054608, 0.7535089102665194], [0.4986371070325277, 0.4835611377909125], [0.38501742160278746, 0.4791768740813327], [0.48440366972477067, 0.7965692843741624]]], [[[0.28594978442810043, 0.8112249289833864], [0.5269562615330906, 0.7775817502974604], [0.24498618950402307, 0.740892941226831], [0.3721131483584834, 0.752115684824583], [0.39856754948644285, 0.7801915991156964], [0.5173757047667863, 0.8270803949224259], [0.4968474148802018, 0.7928248461937588], [0.4483309659090909, 0.7954522175560791], [0.37669056912045024, 0.7429487849945962], [0.33958275893759765, 0.7834212107054662]], [[0.4812623274161736, 0.4812623274161736], [0.4695817490494297, 0.4695817490494297], [0.6092475067996374, 0.6092475067996374], [0.05642633228840126, 0.5304054054054054], [0.09059233449477352, 0.20224719101123595], [0.33941605839416056, 0.4351005484460695], [0.03194888178913738, 0.03194888178913738], [0.08358208955223881, 0.08358208955223881], [0.5540838852097131, 0.5540838852097131], [0.030303030303030304, 0.030303030303030304]], [[0.20860803116571772, 0.7063534929061664], [0.11170304175975254, 0.3353897080950948], [0.06019906463604749, 0.11887746208819941], [0.15978633757741809, 0.42881058983842707], [0.10252894949445492, 0.1540659602333611], [0.13054580274497288, 0.17860361060187055], [0.10909179735209341, 0.1636264440069265], [0.12937509277126316, 0.17963968125649613], [0.12001399580125963, 0.17753084094547508], [0.14472376082942764, 0.34916849701914027]], [[0.47544204322200395, 0.47544204322200395], [0.056338028169014086, 0.056338028169014086], [0.1925925925925926, 0.17857142857142858], [0.36774193548387096, 0.36774193548387096], [0.0641025641025641, 0.0641025641025641], [0.08415841584158416, 0.08415841584158416], [0.26038781163434904, 0.26038781163434904], [0.06428571428571428, 0.06428571428571428], [0.11934156378600823, 0.23300970873786409], [0.12159329140461216, 0.12184873949579832]], [[0.3175355450236967, 0.3175355450236967], [0.12037037037037036, 0.12037037037037036], [0.19597989949748743, 0.19240506329113924], [0.2892768079800499, 0.2892768079800499], [0.27341772151898736, 0.27341772151898736], [0.04778156996587031, 0.04778156996587031], [0.15272727272727274, 0.15272727272727274], [0.07453416149068323, 0.07453416149068323], [0.08974358974358974, 0.11789473684210526], [0.061068702290076333, 0.061068702290076333]], [[0.6481427317929219, 0.8017194607904512], [0.7764914796981184, 0.8405600284541016], [0.70393777345649, 0.813242690543304], [0.5299779534333494, 0.7875260597637248], [0.7003816220439316, 0.7948044919496685], [0.6653461725987323, 0.8535973800020469], [0.7525661353584244, 0.7799255048029798], [0.7024573596680969, 0.7797845683230824], [0.7517461321525526, 0.8123870345824799], [0.633589053834147, 0.788130221838087]], [[0.6771523178807947, 0.8252167677162787], [0.7269530652805382, 0.7769991147831219], [0.7033421881756965, 0.8146846208362863], [0.5748833262621977, 0.7387665198237885], [0.6851896159827731, 0.7554066231133139], [0.7360233639289546, 0.8348906321115901], [0.7114666666666667, 0.7776513427401002], [0.6664690845774831, 0.8491665368437451], [0.6968936478723997, 0.7749417524018953], [0.6754820936639119, 0.8204122230203901]], [[0.7890379674564659, 0.7921660333235896], [0.4004519774011299, 0.6561321601723829], [0.7277620396600567, 0.7241529736803839], [0.37521396781924, 0.7388932190179267], [0.3589573302341026, 0.6848492757405715], [0.467547793249941, 0.8292811839323467], [0.5666733507118508, 0.8014037326527357], [0.5543113101903695, 0.5433509498643051], [0.5482993197278911, 0.5567400275103164], [0.5625398173709917, 0.5583504264277231]], [[0.8044742729306488, 0.8], [0.3873983036177947, 0.6711817553559087], [0.6847120563458086, 0.70687742651137], [0.359779522298313, 0.6145032834986727], [0.23264352469959945, 0.7276775251933443], [0.45539152759948653, 0.5559534467323187], [0.6729036729036729, 0.7610022486347575], [0.4907458310426975, 0.7650541516245487], [0.3830976078225947, 0.7687876407436501], [0.49271064986409685, 0.8131123523486861]]], [[[0.30572609948627993, 0.8230747090991324], [0.5288753799392097, 0.7802184317094122], [0.26246064278500564, 0.7755236681510803], [0.38491505248349744, 0.7698076296054777], [0.41825035948855466, 0.8024830373899234], [0.5392606171707913, 0.8416740300425737], [0.5271460860740809, 0.8102839488009416], [0.46970632330893375, 0.8164092859797926], [0.39139843116040035, 0.7642605090958923], [0.34800531305821464, 0.8122642736376642]], [[0.49783549783549785, 0.49783549783549785], [0.5173913043478261, 0.5173913043478261], [0.6377097729516288, 0.6377097729516288], [0.05642633228840126, 0.5400696864111498], [0.09075043630017451, 0.18536585365853658], [0.3308270676691729, 0.4307692307692308], [0.03194888178913738, 0.03194888178913738], [0.0718562874251497, 0.0718562874251497], [0.5431235431235432, 0.5431235431235432], [0.030303030303030304, 0.030303030303030304]], [[0.21959629470859038, 0.6423497154252005], [0.12229723955217503, 0.345996930793128], [0.06634192989271732, 0.12712281209315782], [0.17025175818385907, 0.4432534922416128], [0.11232890057966778, 0.16856771755815325], [0.13986724680026677, 0.19291593452325903], [0.1115314215985357, 0.16956603951971258], [0.13860566835121316, 0.5156611850569603], [0.1258386008453872, 0.6936918857448658], [0.15434606011372867, 0.36117001372084323]], [[0.4871287128712871, 0.4871287128712871], [0.06722689075630252, 0.06722689075630252], [0.19851116625310175, 0.20151133501259447], [0.379585326953748, 0.379585326953748], [0.07570977917981073, 0.07570977917981073], [0.0794044665012407, 0.0794044665012407], [0.2786885245901639, 0.2786885245901639], [0.06428571428571428, 0.06428571428571428], [0.11909650924024641, 0.2633587786259542], [0.13250517598343686, 0.13305613305613306]], [[0.34823529411764703, 0.34823529411764703], [0.12471131639722864, 0.12471131639722864], [0.20246913580246914, 0.20151133501259447], [0.3095823095823096, 0.3095823095823096], [0.30198019801980197, 0.30198019801980197], [0.0410958904109589, 0.0410958904109589], [0.19649122807017544, 0.19649122807017544], [0.0804953560371517, 0.0804953560371517], [0.1059322033898305, 0.14906832298136646], [0.061068702290076333, 0.061068702290076333]], [[0.6863855080667988, 0.8204874427811456], [0.7986165270760571, 0.8560963855421687], [0.7291560942117675, 0.8295147327889894], [0.5462108687536664, 0.7956840143866187], [0.7175359391707259, 0.803088803088803], [0.7012354478498456, 0.8661950325732899], [0.7707643944407677, 0.8010541220893643], [0.7265886287625418, 0.8020990953285471], [0.7746720799500312, 0.8334014767069915], [0.6606651826633495, 0.8014155829209345]], [[0.704157743150432, 0.8396951537258989], [0.7509388613489559, 0.7956278596847992], [0.7243022048494473, 0.8282953489027242], [0.5672969966629589, 0.7389590776824192], [0.7089495080421846, 0.7767904398451211], [0.7649847317144104, 0.8582721027082947], [0.7346758310221472, 0.8058764158349221], [0.6917479260660748, 0.8631079039072378], [0.7102414654454621, 0.7878709005726184], [0.6873548935613616, 0.8296267539237979]], [[0.7982733812949641, 0.8081705150976909], [0.41736001798965594, 0.6722292762561219], [0.7495091164095372, 0.7458357265939115], [0.42101773578650753, 0.7739174219536757], [0.37489732216198457, 0.7099578166943628], [0.45887549241972064, 0.827567760342368], [0.5956349206349206, 0.8174025553938218], [0.5837424986361156, 0.8219785089176914], [0.584814753281276, 0.8149048197650871], [0.5798754091437018, 0.5765208110992529]], [[0.8073679538393254, 0.8110934303250739], [0.3979363714531384, 0.6772853185595568], [0.6953146659273635, 0.7069922308546059], [0.3797760210803689, 0.6561954624781849], [0.19928583574222072, 0.7250591016548463], [0.44828142649669195, 0.7616153943537156], [0.671599718111346, 0.7639721367244452], [0.5029112081513828, 0.7796561190579396], [0.39577196326459885, 0.7797402597402597], [0.5054097749036189, 0.824748093040776]]], [[[0.3467220119643511, 0.8444926077869804], [0.5593518156969933, 0.7967427494083196], [0.3037534754402224, 0.8221621621621622], [0.4256538114688876, 0.7927870166299339], [0.4628485305199699, 0.8339948374920203], [0.5974673642008508, 0.8594364989673045], [0.5961299485176638, 0.8372579423749594], [0.5227906178980318, 0.8477477775207376], [0.4300970873786408, 0.7994952513780965], [0.3802284789061797, 0.8426621587778612]], [[0.5473145780051151, 0.5473145780051151], [0.672566371681416, 0.672566371681416], [0.6557017543859649, 0.6557017543859649], [0.05642633228840126, 0.5645756457564576], [0.0773286467486819, 0.18536585365853658], [0.33992094861660077, 0.4543610547667343], [0.03194888178913738, 0.03194888178913738], [0.07738095238095238, 0.07738095238095238], [0.5037037037037037, 0.5037037037037037], [0.04804804804804805, 0.04804804804804805]], [[0.25048550804294456, 0.737891700708683], [0.155330843788025, 0.38120658135283364], [0.08343449296817172, 0.15035274627974066], [0.20018026137899955, 0.4844790821429245], [0.13960400786231364, 0.1993984266543267], [0.17376129635400436, 0.23766479473858074], [0.12608337771752287, 0.19004017565168643], [0.16922450877804907, 0.5696625157913734], [0.14891539507189216, 0.723530414933949], [0.19071665744327615, 0.39962293985282493]], [[0.5430210325047801, 0.5430210325047801], [0.11989100817438691, 0.11989100817438691], [0.2469733656174334, 0.24878048780487805], [0.4117647058823529, 0.4117647058823529], [0.11585365853658537, 0.11585365853658537], [0.07960199004975124, 0.07960199004975124], [0.3368421052631579, 0.3368421052631579], [0.11149825783972125, 0.11149825783972125], [0.13765182186234817, 0.30514705882352944], [0.17425742574257425, 0.20039292730844793]], [[0.4036281179138322, 0.4036281179138322], [0.16666666666666666, 0.16666666666666666], [0.24528301886792453, 0.236144578313253], [0.3870967741935484, 0.3870967741935484], [0.37850467289719625, 0.37850467289719625], [0.03436426116838488, 0.03436426116838488], [0.24915824915824916, 0.24915824915824916], [0.12121212121212122, 0.12121212121212122], [0.14522821576763487, 0.23274161735700197], [0.06598984771573604, 0.06598984771573604]], [[0.7513905575579585, 0.8506917986765591], [0.8360290747167834, 0.8705815459456044], [0.7771494186881011, 0.8545774272620698], [0.5961786063758562, 0.8089522914620083], [0.7598553967980719, 0.8164090945869407], [0.767962308598351, 0.8835087019398594], [0.814557920752611, 0.834838311337501], [0.7742172865935242, 0.8309102898232172], [0.8119729124184981, 0.8574684806610158], [0.7227406525959792, 0.8235662088771362]], [[0.7596160632366433, 0.8616328095055577], [0.8003452243958573, 0.8763340448239061], [0.7744869334120774, 0.854124025004149], [0.5820971433415275, 0.7436122702979721], [0.7556781034139686, 0.8129332755632582], [0.816300488237905, 0.8869448183041723], [0.7791860731465221, 0.8346076168493941], [0.749185667752443, 0.8884509733667741], [0.7490196078431373, 0.8066289864709343], [0.7278805582603051, 0.8458699814100608]], [[0.795160382667417, 0.817725258493353], [0.448720752241417, 0.6932952924393724], [0.7876563349646547, 0.7900621118012422], [0.49666718338242133, 0.8283512377393741], [0.40366088631984587, 0.7438631291842301], [0.48551919001648225, 0.8167132930240953], [0.6676783004552352, 0.833037013091967], [0.6407093292212799, 0.8356252685861625], [0.6684251357641583, 0.8352570828961176], [0.6170957775489186, 0.8000356760613628]], [[0.8103827540695117, 0.8165733482642777], [0.43095037846930195, 0.688565145684442], [0.7145008900451869, 0.728629579375848], [0.43755898081157596, 0.6952822892498066], [0.16215277777777778, 0.7348130841121495], [0.48, 0.7747589833479404], [0.6743200282585659, 0.7636958299264105], [0.5381340901028734, 0.7980028530670471], [0.4387858347386172, 0.8079838302172815], [0.5539917495753458, 0.830695443645084]]], [[[0.5429936305732485, 0.8726047588966098], [0.8157184750733137, 0.8514201652144393], [0.5846532078861519, 0.8844852916054529], [0.8122402121847908, 0.8701317823750276], [0.7965242577842143, 0.8890342499803763], [0.8267549042779485, 0.8890614025359506], [0.8841280653950954, 0.9115117707606999], [0.8648929604002209, 0.9055956059045658], [0.754768672305743, 0.8842061089295884], [0.6890968884391602, 0.887851571732451]], [[0.5706371191135734, 0.5706371191135734], [0.6966292134831461, 0.6966292134831461], [0.7369519832985386, 0.7369519832985386], [0.05642633228840126, 0.05642633228840126], [0.07054673721340388, 0.1821138211382114], [0.32989690721649484, 0.32989690721649484], [0.044444444444444446, 0.044444444444444446], [0.1615598885793872, 0.1615598885793872], [0.6816143497757847, 0.6816143497757847], [0.09329446064139942, 0.09329446064139942]], [[0.5677822400713967, 0.9220317263930008], [0.8753803904104506, 0.8843875685557587], [0.6520412134619717, 0.9105806911293196], [0.6906414027333149, 0.9195910255739762], [0.5983310585511653, 0.9000788205346875], [0.6685775707631674, 0.9143412565167447], [0.5344477836213374, 0.9213283122218419], [0.7482963806680937, 0.913660165053973], [0.5329467263603858, 0.9115702021600665], [0.8521705376204955, 0.8655835191674631]], [[0.66, 0.66], [0.7677100494233937, 0.7677100494233937], [0.5555555555555556, 0.5555555555555556], [0.492040520984081, 0.492040520984081], [0.8120805369127517, 0.8120805369127517], [0.07960199004975124, 0.07960199004975124], [0.7712, 0.7712], [0.6742301458670988, 0.6742301458670988], [0.29152542372881357, 0.5195936139332366], [0.2810810810810811, 0.420545746388443]], [[0.7042735042735043, 0.7042735042735043], [0.6957787481804949, 0.6957787481804949], [0.7507163323782235, 0.7507163323782235], [0.6634460547504025, 0.6634460547504025], [0.7092436974789916, 0.7092436974789916], [0.03436426116838488, 0.03436426116838488], [0.6842105263157895, 0.6842105263157895], [0.53125, 0.53125], [0.4805194805194805, 0.4805194805194805], [0.2371364653243848, 0.2371364653243848]], [[0.8662971262334395, 0.8822463069387125], [0.8755966222004651, 0.8812828957493305], [0.8953512080742175, 0.9028349279277005], [0.8236283371873029, 0.8384204031262855], [0.877125212838954, 0.8806343274159744], [0.8842417500926956, 0.9013227768658878], [0.8902988572046577, 0.8914646996838778], [0.898217730557715, 0.9007962744703482], [0.8661657666118807, 0.8697014332140937], [0.8621261104621153, 0.8737900827340075]], [[0.8713734909297769, 0.8831281860002487], [0.8984284426123921, 0.9045762495206443], [0.8928647271182841, 0.9059051205606988], [0.7469722242367104, 0.7492976010373892], [0.8854562378927772, 0.8896923153642846], [0.887652777423388, 0.9191089108910891], [0.8894427275446117, 0.8922304085733422], [0.9013212103992044, 0.9049052992992429], [0.8507896824442895, 0.8519181272214732], [0.8381298023760243, 0.8526835657180277]], [[0.7776298268974701, 0.8226086956521739], [0.71398891966759, 0.7340407613272697], [0.8432144217341627, 0.8493255281242046], [0.8296691094825672, 0.8372345036844386], [0.7184932372645684, 0.8264047510278666], [0.7872202099006222, 0.8013154288846259], [0.8310591293047433, 0.8340604297947972], [0.837022981235505, 0.8414710159983378], [0.8337367817556377, 0.8380976473564381], [0.7817098808689559, 0.8207124122176157]], [[0.8027741655830082, 0.8027741655830082], [0.5870184380152901, 0.7126651541438677], [0.7627361563517915, 0.7805380357832411], [0.7797140303842717, 0.7918521816562778], [0.6370240480961924, 0.7350661194710443], [0.7842846553002224, 0.7912302070645554], [0.7997453040432984, 0.8338228474261864], [0.8056911703166411, 0.821195652173913], [0.8113137327874953, 0.8170536920997665], [0.7963018792081198, 0.8248068081776386]]]])
adaptive = np.array([[[0.5055100157429021, 0.8568962416831505], [0.8182977243750724, 0.8536375537684683], [0.5651695604343043, 0.85071106486299], [0.7876723308752805, 0.8678173476076032], [0.7800548841011269, 0.8885783057690815], [0.8118285963451857, 0.8805316196874544], [0.9112942953791586, 0.9171252620545073], [0.8699049021805257, 0.9192249470178625], [0.7554386319943337, 0.8790013374944271], [0.6580121703853955, 0.8810151519541096]], [[0.5366876310272537, 0.5366876310272537], [0.7363896848137536, 0.7363896848137536], [0.8140610545790934, 0.8140610545790934], [0.09202453987730061, 0.614065180102916], [0.10662358642972536, 0.19879518072289157], [0.3408624229979466, 0.3408624229979466], [0.11042944785276074, 0.11042944785276074], [0.2582278481012658, 0.2582278481012658], [0.720160481444333, 0.720160481444333], [0.09329446064139942, 0.09329446064139942]], [[0.5874663367057282, 0.9361271645196354], [0.8951578345950578, 0.9029311359623308], [0.9168870058296964, 0.9164957142629964], [0.7137483931377061, 0.927556618371079], [0.6456027435109789, 0.9019958446137379], [0.6904860641246698, 0.9183504870744552], [0.6339363216554981, 0.9298896959913909], [0.8340416297448324, 0.9275487064042507], [0.6258105992844365, 0.9202824988265601], [0.7851396547048721, 0.8906619506878611]], [[0.7120743034055728, 0.7120743034055728], [0.8142644873699851, 0.8142644873699851], [0.5641891891891891, 0.5641891891891891], [0.5604249667994687, 0.5604249667994687], [0.8034934497816594, 0.8034934497816594], [0.10757946210268948, 0.10757946210268948], [0.7651403249630724, 0.7651403249630724], [0.6705710102489019, 0.6705710102489019], [0.3385093167701863, 0.5542168674698795], [0.3745928338762215, 0.5106382978723404]], [[0.7480680061823802, 0.7480680061823802], [0.7337931034482759, 0.7337931034482759], [0.7427821522309711, 0.7427821522309711], [0.6629213483146067, 0.6629213483146067], [0.764367816091954, 0.764367816091954], [0.06756756756756757, 0.06756756756756757], [0.6622516556291391, 0.6622516556291391], [0.5240174672489083, 0.5240174672489083], [0.5743145743145743, 0.5743145743145743], [0.44061302681992337, 0.44061302681992337]], [[0.8697162709901564, 0.8884784984735989], [0.881196427501049, 0.8834363189153519], [0.9038817931379914, 0.9070531304064389], [0.7787857641311933, 0.8446247464503043], [0.8847668910496136, 0.8862299331937381], [0.869339068243767, 0.8991393482255101], [0.8968482393490388, 0.8976243741344413], [0.8926325374918187, 0.8936413868132498], [0.8605986732612925, 0.8719530579585778], [0.845311860242937, 0.8669221903562143]], [[0.8719821209355032, 0.8822469396632076], [0.9056161999683594, 0.9068475859892711], [0.895370128171593, 0.8970864661654135], [0.7734713865957744, 0.7795902751208653], [0.8970766303407715, 0.8993848966181666], [0.8938230719052637, 0.9238677613467489], [0.8902018709995076, 0.8966623036649215], [0.8835073307091106, 0.8873942043607421], [0.8534922934428955, 0.8608154153448478], [0.8303095589069055, 0.8525523911875336]], [[0.7812259553731726, 0.8250283125707815], [0.7128644939965695, 0.7256786376664981], [0.8571428571428571, 0.8631889763779528], [0.7114458575132733, 0.7232836188832737], [0.647500989054464, 0.8394397759103641], [0.8179643901142706, 0.8479672019132217], [0.8604507564062982, 0.8602646968297938], [0.8434484905073141, 0.8532032244378447], [0.8401137628292321, 0.8401284902396837], [0.8323680561220328, 0.8374695863746958]], [[0.8054736842105263, 0.8054736842105263], [0.592482543455653, 0.7483204134366925], [0.8126119670369043, 0.834878535383171], [0.7547559019023607, 0.7720013591573225], [0.679820415879017, 0.7782561894510226], [0.8120742306788818, 0.8216656959813629], [0.8286987248425257, 0.8536255817444828], [0.8038211269555586, 0.8056753373209069], [0.8179502728926622, 0.818567446370137], [0.8295851105079488, 0.846446942274719]]])

def dice_coefficient(mask1, mask2):
    intersection = np.sum(mask1 * mask2)
    total = np.sum(mask1) + np.sum(mask2)
    dice = (2.0 * intersection) / total
    return dice


def run_2iterations(img, ground_truth,w):
    seed_points = convert_to_labels(automatic_contours(ground_truth))
    segmentation = None
    if w is None:
        segmentation,probabilities = segment(img,seed_points)
    else:
        segmentation, probabilities = segment(img, seed_points,pred=predictions,w=w)
    uncertainty_field = calculate_uncertainty_fields(img, segmentation, probabilities)
    uncertainty, point, normal, chosen_axis = discreet_get_optimal_slice(uncertainty_field, True, True, True)
    if chosen_axis == "x":
        contours = create_contour(ground_truth[point])
    elif chosen_axis == "y":
        contours = create_contour(ground_truth[:, point, :])
    else:
        contours = create_contour(ground_truth[:, :, point])
    new_labeled_slice = convert_to_labels2d(contours, dil_size=3).astype(int)
    if chosen_axis == "x":
        seed_points[point][new_labeled_slice == 2] = 2
        seed_points[point][new_labeled_slice == 1] = 1
    elif chosen_axis == "y":
        seed_points[:, point, :][new_labeled_slice == 2] = 2
        seed_points[:, point, :][new_labeled_slice == 1] = 1
    else:
        seed_points[:, :, point][new_labeled_slice == 2] = 2
        seed_points[:, :, point][new_labeled_slice == 1] = 1
    if w is None:
        segmentation2,probabilities2 = segment(img,seed_points)
    else:
        segmentation2, probabilities = segment(img, seed_points,pred=predictions,w=w)
    return segmentation,segmentation2

def confidence_int(results,target_value,one_iteration = True):
    y = np.zeros(results.shape[0])
    confidence_interval = np.zeros(results.shape[0])
    results = results[:,:,target_value]
    for index,data in enumerate(results):
        lower_percentile = (100 - 95) / 2
        upper_percentile = 100 - lower_percentile
        lower_bound = np.percentile(data, lower_percentile)
        upper_bound = np.percentile(data, upper_percentile)
        y[index] = np.mean(data)
        confidence_interval[index] = (upper_bound-lower_bound)/2
    return y,confidence_interval
def plot_confidence(r1,r2,r3,target_value):
    x = np.array([i for i in range(r1.shape[0])])
    y,confidence_interval = confidence_int(r1,target_value)
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5, label='a')
    y,confidence_interval = confidence_int(r2,target_value)
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='b')
    y,confidence_interval = confidence_int(r3,target_value)
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='c')
    plt.xlabel('ROI')
    plt.ylabel('Dice')
    plt.title('Average Dice for different ROIs')
    plt.legend()
    plt.xticks(np.arange(min(x), max(x) + 1, 1))
    plt.show()

def compare_alphas(results, iteration,target_var=0):
    weights = [1.0,0.8,0.6,0.4,0.2,0.0]
    x = np.array([i for i in range(results.shape[1])])
    bar_width = (1/len(weights))*0.9
    for i in range(len(weights)):
        result = results[i,:,:,iteration,target_var]
        y = np.zeros(result.shape[0])
        confidence_interval = np.zeros(result.shape[0])
        for index,data in enumerate(result):
            lower_percentile = (100 - 95) / 2
            upper_percentile = 100 - lower_percentile
            lower_bound = np.percentile(data, lower_percentile)
            upper_bound = np.percentile(data, upper_percentile)
            y[index] = np.mean(data)
            confidence_interval[index] = (upper_bound-lower_bound)/2
        plt.bar(x+i*bar_width-bar_width/2, y, width=bar_width, yerr=confidence_interval, capsize=5, label='\u03B1 = '+str(weights[i])) #fmt='o'
    plt.xlabel('ROI')
    plt.ylabel('Dice')
    plt.title('Unanimous predictions approach, iteration 2')
    plt.legend()
    plt.xticks(np.arange(min(x),max(x)+1,1))
    plt.show()

def adaptive_alpha_plot(results,target_var=0):
    x = np.array([i for i in range(results.shape[0])])
    bar_width = 0.5
    for i in range(2):
        result = results[:,:,i,target_var]
        y = np.zeros(result.shape[0])
        confidence_interval = np.zeros(result.shape[0])
        for index,data in enumerate(result):
            lower_percentile = (100 - 95) / 2
            upper_percentile = 100 - lower_percentile
            lower_bound = np.percentile(data, lower_percentile)
            upper_bound = np.percentile(data, upper_percentile)
            y[index] = np.mean(data)
            confidence_interval[index] = (upper_bound-lower_bound)/2
        plt.bar(x+i*bar_width-bar_width/2, y, width=bar_width, yerr=confidence_interval, capsize=5, label=str(i+1)) #fmt='o'

    plt.xlabel('ROI')
    plt.ylabel('Dice')
    plt.title('Adaptive alpha approach for two iterations')
    plt.legend()
    plt.xticks(np.arange(min(x),max(x)+1,1))
    plt.show()

def plot_confidence2(r1,r2,r3,target_value,organ):
    x = np.array([0,1,2])
    y1,c1 = confidence_int(r1[:,:,0,:],target_value)
    y2,c2 = confidence_int(r1[:,:,1,:],target_value)
    y = np.array([0,y1[organ],y2[organ]])
    confidence_interval = np.array([0,c1[organ],c2[organ]])
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5, label='a',color='blue')
    plt.plot(x, y, '-',color='blue')
    y1,c1 = confidence_int(r2[:,:,0,:],target_value)
    y2,c2 = confidence_int(r2[:,:,1,:],target_value)
    y = np.array([0,y1[organ],y2[organ]])
    confidence_interval = np.array([0,c1[organ],c2[organ]])
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='b',color='orange')
    plt.plot(x, y, '-',color='orange')
    y1,c1 = confidence_int(r3[:,:,0,:],target_value)
    y2,c2 = confidence_int(r3[:,:,1,:],target_value)
    y = np.array([0,y1[organ],y2[organ]])
    confidence_interval = np.array([0,c1[organ],c2[organ]])
    plt.errorbar(x, y, yerr=confidence_interval, fmt='o', capsize=5,label='c',color='green')
    plt.plot(x, y, '-',color='green')
    plt.xlabel('iteration')
    plt.ylabel('Dice')
    plt.title('Average Dice for first 2 iterations')
    plt.legend()
    plt.xticks(np.arange(min(x), max(x) + 1, 1))
    plt.show()

def get_bbox(img,ground_truth):
    z = np.any(ground_truth, axis=(1, 2))
    y = np.any(ground_truth, axis=(0, 2))
    x = np.any(ground_truth, axis=(0, 1))
    zmin, zmax = np.where(z)[0][[0, -1]]
    ymin, ymax = np.where(y)[0][[0, -1]]
    xmin, xmax = np.where(x)[0][[0, -1]]
    z_offset = 5
    xy_offset = 10
    zmin = max(0, zmin - z_offset)
    ymin = max(0, ymin - xy_offset)
    xmin = max(0, xmin - xy_offset)
    zmax = min(len(img), zmax + z_offset + 1)
    ymax = min(len(img[0]), ymax + xy_offset + 1)
    xmax = min(len(img[0][0]), xmax + xy_offset + 1)
    return zmin,zmax,ymin,ymax,xmin,xmax

def false_positives(segmentation,ground_truth):
    return np.sum((segmentation == 1) & (ground_truth == 0))

def false_negatives(segmentation,ground_truth):
    return np.sum((segmentation == 0) & (ground_truth == 1))
def true_negatives(segmentation,ground_truth):
    return np.sum((segmentation == 0) & (ground_truth == 0))

def true_positives(segmentation,ground_truth):
    return np.sum((segmentation == 1) & (ground_truth == 1))
def synthetic_data():
    size = 30
    image = 255*np.indices((size,size,size))[2]/size
    left_bound, right_bound = int(image.shape[2]/6), int(5*image.shape[2]/6)
    seeds = np.zeros(image.shape,dtype='int')
    seeds[:,:,:left_bound], seeds[:,:,right_bound:] = 2,1
    N_predictions = 6
    predictions = []
    boundaries = []
    for _ in range(N_predictions):
        boundary = np.random.uniform(0.6*size,5*size/6)
        prediction = np.zeros(image.shape)
        prediction[:,:,round(boundary):] = 1
        predictions.append(prediction)
        boundaries.append(boundary)

    print("seed bounds: ",left_bound,right_bound)
    print("predicted bounds: ",boundaries)

    # basic weight function
    segmentation, prob = segment(image,seeds)
    basic_segmentation_boundary = np.where(segmentation[0,0]==1)[0][0]
    print("basic segmentation boundary: ",basic_segmentation_boundary)


    cropped = image[:,:10,:]
    colors = ['red', 'green']
    labels = ['bg', 'fg']
    patches = [mpatches.Patch(color=color, label=label) for color, label in zip(colors, labels)]

    visualize = np.transpose(np.array([cropped,cropped,cropped],dtype=np.uint8),(1,2,3,0))
    initial_labels = visualize[0]
    initial_labels[:,:left_bound],initial_labels[:,right_bound:] = [255,0,0],[0,255,0]
    fig, ax = plt.subplots()
    ax.imshow(initial_labels)
    ax.set_xlabel('Pixel Intensity')
    ax.set_title('Initial labels')
    plt.xticks([0,left_bound-0.5,size/2,right_bound-0.5,size-1])
    plt.legend(handles=patches)
    plt.savefig('approach1_basic.png')

    fig, ax = plt.subplots()
    initial_seg = np.transpose(np.array([cropped,cropped,cropped],dtype=np.uint8),(1,2,3,0))[0]
    ax.imshow(initial_seg)
    ax.plot([basic_segmentation_boundary-0.5,basic_segmentation_boundary-0.5], [0,initial_seg.shape[0]-1], linestyle='dashed', color='black',label='segmentation boundary')
    # ax.plot([right_bound-0.5,right_bound-0.5], [0,29], linestyle='dashed', color='black')
    ax.set_xlabel('Pixel Intensity')
    ax.set_title('Segmentation boundary using basic RW')
    plt.xticks([0,left_bound-0.5,basic_segmentation_boundary-0.5,right_bound-0.5,size-1])
    plt.legend()
    plt.savefig('approach1_basic_result.png')

    fig, ax = plt.subplots()
    ax.imshow(initial_labels)
    line = None
    ticks = [0,left_bound-0.5,size/2,right_bound-0.5,size-1]
    for boundary in boundaries:
        line, = ax.plot([boundary-0.5,boundary-0.5], [0,initial_seg.shape[0]-1], linestyle='dashed', color='black',label='predictions of segmentation boundary')
    ax.set_xlabel('Pixel Intensity')
    ax.set_title('Initial labels with predicted segmentations')
    plt.legend()
    plt.legend(handles=patches+[line])
    plt.xticks(ticks)
    plt.savefig('approach1_ext.png')

    results = []
    for weight in [0.8,0.6,0.4,0.2,0.0]:
        # extended weight function
        segmentation, prob = segment(image,seeds,pred=np.array(predictions),w=weight)
        ext_segmentation_boundary = np.where(segmentation[0,0]==1)[0][0]
        print("extended segmentation_boundary: ",ext_segmentation_boundary)
        results.append(ext_segmentation_boundary)
        fig, ax = plt.subplots()
        ax.imshow(initial_seg)
        print(ext_segmentation_boundary)
        ax.plot([ext_segmentation_boundary-0.5,ext_segmentation_boundary-0.5], [0,initial_seg.shape[0]-1], linestyle='dashed', color='black',label='segmentation boundary')
        ax.set_xlabel('Pixel Intensity')
        ax.set_title('Segmentation boundary using extended RW, \u03B1 = '+str(weight))
        plt.xticks([0,ext_segmentation_boundary-0.5,size-1])
        plt.legend()
        plt.savefig('approach1_ext_'+str(weight)+'.png')
    return results

def load(chosen_organ,folder_path = None):
    global predictions
    if folder_path is None:
        window = tk.Tk()
        window.withdraw()
        folder_path = filedialog.askdirectory()
        window.destroy()
    img = np.load(folder_path.joinpath("img_ai.npy"))
    ground_truth = np.load(folder_path.joinpath("structures_ai.npy")).astype(int)
    predictions = []
    for i in range(1,7):
        prediction = np.load(folder_path.joinpath("maskpred_"+str(i)+".npy"))
        prediction[prediction != chosen_organ] = 0
        prediction[prediction != 0] = 1
        predictions.append(prediction.astype(int))
    predictions = np.array(predictions)
    ground_truth[ground_truth != chosen_organ] = 0
    ground_truth[ground_truth != 0] = 1
    ground_truth = ground_truth.astype(int)

    zmin,zmax,ymin,ymax,xmin,xmax = get_bbox(img,ground_truth)
    predictions = predictions[:,zmin:zmax,ymin:ymax,xmin:xmax]
    img = img[zmin:zmax, ymin:ymax, xmin:xmax]
    ground_truth = ground_truth[zmin:zmax, ymin:ymax, xmin:xmax]

    return img,ground_truth

def evaluate(chosen_organ,w,baseline = False,patient = None):
    path = Path(r'C:\Users\Bram\Documents\RP\miccai_data_numpy\part4')
    results = []
    count = 0
    for p in path.rglob("img.npy"):
        if patient is None:
            print(count)
        if patient is not None:
            if patient != count:
                count += 1
                continue
        patient_base_path = p.parent
        patient_id = patient_base_path.stem
        img, ground_truth = load(chosen_organ, folder_path=patient_base_path)
        segmentation1,segmentation2 = run_2iterations(img,ground_truth,w)
        values = [dice_coefficient(segmentation1,ground_truth),dice_coefficient(segmentation2,ground_truth)]
        results.append(values)
        count += 1

    return results
viewer = None
def poster_results(chosen_organ):
    global show
    global viewer
    global predictions

    path = Path(r'C:\Users\Bram\Documents\RP\miccai_data_numpy\part4')
    worst_dice = 1
    worst_patient = -1
    count = 0
    for p in path.rglob("img.npy"):
        patient_base_path = p.parent
        patient_id = patient_base_path.stem
        img, ground_truth = load(chosen_organ, folder_path=patient_base_path)
        if show:
            viewer.add_image(img, name="CT_SCAN", colormap="gray", interpolation2d="bicubic")
        dices = []
        for i in range(len(predictions)):
            for j in range(i+1, len(predictions)):
                dices.append(dice_coefficient(predictions[i],predictions[j]))
        if np.mean(dices) < worst_dice:
            worst_dice = np.mean(dices)
            worst_patient = count
        count += 1
    return worst_dice,worst_patient


def get_average(results):
    avr_patients = []
    for w in results:
        arr = [round(w[0],1)]
        for index in range(1,len(w)):
            avr = 0
            for patient in w[index]:
                dice,fp,fn,tp,tn,patient,organ = patient[0], patient[1], patient[2], patient[3], patient[4], patient[5], patient[6]
                # WE NOW TAKE THE AVERAGE OF:
                avr += fn
            avr /= len(w[index])

            arr.append(round(avr,3))
        print(arr)
        avr_patients.append(arr)

def avr_per_organ(results):
    averages = []
    for result in results:
        avr = 0
        for patient_res in result:
            avr += patient_res[0] # dice is at 0
        avr /= len(result)
        averages.append(round(avr,3))
    print(averages)

def avr_per_patient(results):
    avr = np.zeros(len(results[0]))
    for organ in results:
        for index,patient in enumerate(organ):
            avr[index] += patient[0]
    avr = [x/len(results) for x in avr]
    avr = [round(x,3) for x in avr]
    print(avr)




def boxplots(data,iteration):
    data = data[:,:,:,iteration]

    mean_data = np.mean(data, axis=1)
    mean_data = np.expand_dims(mean_data, axis=1)
    data = np.concatenate([data,mean_data],axis=1)

    fig, ax = plt.subplots(figsize=(30, 20))

    # Set colors for the boxplots
    colors = ['blue', 'green', 'red', 'orange', 'purple', 'cyan']

    organs = ['BStem', 'Opt Chiasm', 'Mandible', 'Opt Nrv L', 'Opt Nrv R', 'Parotid L', 'Parotid R', 'SMD L', 'SMD R', 'AVG']
    boxplots = []

    ensemble_width = 7  # Number of boxplots in each ensemble
    ensemble_gap = 1  # Gap between ensembles
    num_ensembles = len(organs) // ensemble_width

    for i in range(10):
        ensemble_index = i // ensemble_width  # Calculate the ensemble index
        positions = np.arange(6) + (i * (ensemble_width + ensemble_gap))
        boxes = ax.boxplot(data[:, i, :].T, positions=positions, widths=1, medianprops=dict(color='black', linewidth=4),
                           patch_artist=True, whiskerprops=dict(color='black', linewidth=6),
                           flierprops=dict(color='black', markersize=8, markerfacecolor='black'),
                           capprops=dict(color='black', linewidth=6))
        for box, color in zip(boxes['boxes'], colors):
            box.set_facecolor(color)
        boxplots.extend(boxes['boxes'])

    ax.set_xlim(-1, 78)
    ax.set_xticks(np.arange(5, 78+5, 7.8))
    ax.set_xticklabels(organs, rotation=20, ha='right', fontsize=20)
    legend_labels = ['\u03B1 = {}'.format(i) for i in [1.0, 0.8, 0.6, 0.4, 0.2, 0.0]]
    ax.legend(boxplots, legend_labels, fontsize=25)
    ax.set_ylabel('DICE Coefficient', fontsize=25)
    plt.title('Unanimous Votes Approach, iteration '+str(1+iteration),fontsize=30)
    plt.show()


def boxplots2(meanpred,unanimous,adaptive,iteration):
    original = meanpred[0,:,:,iteration]
    meanpred = meanpred[-1,:,:,iteration]
    unanimous = unanimous[-1,:,:,iteration]
    adaptive = adaptive[:,:,iteration]
    data = np.array([original,meanpred,unanimous,adaptive])
    mean_data = np.mean(data, axis=1)
    mean_data = np.expand_dims(mean_data, axis=1)
    data = np.concatenate([data,mean_data],axis=1)

    fig, ax = plt.subplots(figsize=(30, 20))

    # Set colors for the boxplots
    colors = ['blue', 'green', 'red', 'orange']

    organs = ['BStem', 'Opt Chiasm', 'Mandible', 'Opt Nrv L', 'Opt Nrv R', 'Parotid L', 'Parotid R', 'SMD L', 'SMD R', 'AVG']
    boxplots = []

    ensemble_width = 5  # Number of boxplots in each ensemble
    ensemble_gap = 1  # Gap between ensembles
    num_ensembles = len(organs) // ensemble_width

    for i in range(10):
        ensemble_index = i // ensemble_width  # Calculate the ensemble index
        positions = np.arange(4) + (i * (ensemble_width + ensemble_gap))
        boxes = ax.boxplot(data[:, i, :].T, positions=positions, widths=1, medianprops=dict(color='black', linewidth=4),
                           patch_artist=True, whiskerprops=dict(color='black', linewidth=6),
                           flierprops=dict(color='black', markersize=8, markerfacecolor='black'),
                           capprops=dict(color='black', linewidth=6))
        for box, color in zip(boxes['boxes'], colors):
            box.set_facecolor(color)
        boxplots.extend(boxes['boxes'])

    ax.set_xlim(-1, 52)
    ax.set_xticks(np.arange(5, 58, 5.8))
    ax.set_xticklabels(organs, rotation=20, ha='right', fontsize=20)
    legend_labels = ['{}'.format(i) for i in ['Original','Mean Pred \u03B1=0','Unam Vote \u03B1=0','Ada Alpha']]
    ax.legend(boxplots, legend_labels, fontsize=25)
    ax.set_ylabel('DICE Coefficient', fontsize=25)
    plt.title('Comparative results, iteration '+str(iteration+1),fontsize=30)
    plt.show()













